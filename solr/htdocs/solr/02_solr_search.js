// Generated by CoffeeScript 1.5.0
(function() {
  var Hub, Renderer, Request, SearchTableState, add_extra_constraints, all_requests, better_boost, body_cache, body_elevate_crossspecies, body_elevate_quoted, body_embeded_species, body_frontpage_specials, body_hgvs_names, body_highlights, body_quicklinks, body_raw_request, body_requests, body_restrict_categories, body_restrict_primary, body_split_favs, code_select, current_update_seq, dispatch_all_requests, dispatch_draw_main, dispatch_facet_request, dispatch_main_requests, double_trap, draw_main_requests, each_block, generate_block_list, rate_limiter, remote_log, run_all_prepares, size_cache, size_cache_q, stringify_params, traditional_boost, xhr_idx, _clone_array, _clone_object, _kv_copy,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  code_select = function() {
    return $('#solr_config').length > 0;
  };

  _kv_copy = function(old) {
    var k, out, v;
    out = {};
    for (k in old) {
      v = old[k];
      out[k] = v;
    }
    return out;
  };

  _clone_array = function(a) {
    return $.extend(true, [], a);
  };

  _clone_object = function(a) {
    return $.extend(true, {}, a);
  };

  Hub = (function() {
    var _params_used, _section_keys, _style_map;

    Hub.prototype._pair = /([^;&=]+)=?([^;&]*)/g;

    Hub.prototype._decode = function(s) {
      return decodeURIComponent(s.replace(/\+/g, " "));
    };

    Hub.prototype._encode = function(s) {
      return encodeURIComponent(s).replace(/\ /g, "+");
    };

    _params_used = {
      q: ['results'],
      page: ['results'],
      perpage: ['results'],
      sort: ['results'],
      species: ['results'],
      facet: ['results', 'species'],
      columns: ['results'],
      style: ['style']
    };

    _section_keys = {
      facet: /^facet_(.*)/,
      fall: /^fall_(.*)/
    };

    _style_map = {
      'standard': ['page', 'fixes', 'table', 'google', 'pedestrian', 'rhs'],
      'table': ['page', 'fixes', 'table', 'pedestrian', 'rhs']
    };

    function Hub(more) {
      var config_url,
        _this = this;
      config_url = "" + ($('#species_path').val()) + "/Ajax/config";
      this.ga_init();
      $.when($.solr_config({
        url: config_url
      }), $.getScript('/pure/pure.js')).done(function() {
        _this.params = {};
        _this.sections = {};
        _this.interest = {};
        _this.first_service = 1;
        _this.source = new Request(_this);
        _this.renderer = new Renderer(_this, _this.source);
        $(window).bind('popstate', (function(e) {
          return _this.service();
        }));
        $(document).ajaxError(function() {
          return _this.fail();
        });
        _this.spin = 0;
        _this.leaving = 0;
        $(window).unload(function() {
          return this.leaving = 1;
        });
        $(document).on('force_state_change', function() {
          return $(document).trigger('state_change', [_this.params]);
        });
        return more(_this);
      });
    }

    Hub.prototype.ga_init = function() {
      if (Ensembl.GA) {
        return this.ga = new Ensembl.GA.EventConfig({
          category: (function() {
            return this.category;
          }),
          action: (function() {
            return this.action;
          }),
          label: (function() {
            return this.label;
          }),
          value: (function() {
            return this.value;
          }),
          nonInteraction: false
        });
      }
    };

    Hub.prototype.code_select = function() {
      return code_select;
    };

    Hub.prototype.spin_up = function() {
      if (this.spin === 0) {
        $('.hub_fail').hide();
        $('.hub_spinner').show();
      }
      return this.spin += 1;
    };

    Hub.prototype.spin_down = function() {
      if (this.spin > 0) {
        this.spin -= 1;
      }
      if (this.spin === 0) {
        return $('.hub_spinner').hide();
      }
    };

    Hub.prototype.fail = function() {
      if (this.leaving) {
        return;
      }
      return $('.hub_spinner').hide();
    };

    Hub.prototype.unfail = function() {
      $('.hub_fail').hide();
      if (this.spin) {
        return $('.hub_spinner').show();
      }
    };

    Hub.prototype.register_interest = function(key, fn) {
      var _base, _ref;
      if ((_ref = (_base = this.interest)[key]) == null) {
        _base[key] = [];
      }
      return this.interest[key].push(fn);
    };

    Hub.prototype.activate_interest = function(key, value) {
      var w, _i, _len, _ref, _ref1, _results;
      _ref1 = (_ref = this.interest[key]) != null ? _ref : [];
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        w = _ref1[_i];
        _results.push(w.call(this, key));
      }
      return _results;
    };

    Hub.prototype.render_stage = function(more) {
      var _this = this;
      this.set_templates(this.layout());
      if (this.useless_browser()) {
        $('#solr_content').addClass('solr_useless_browser');
      }
      $(document).on('update_state', function(e, qps) {
        return _this.update_url(qps);
      });
      $(document).on('ga', function(e, category, action, label, value) {
        if (label == null) {
          label = '';
        }
        if (value == null) {
          value = 1;
        }
        if (!_this.ga || !Ensembl.GA) {
          return;
        }
        return Ensembl.GA.sendEvent(_this.ga, {
          category: category,
          action: action,
          label: label,
          value: value
        });
      });
      $(document).on('update_state_incr', function(e, qps) {
        return rate_limiter(qps).then(function(data) {
          return _this.update_url(data);
        });
      });
      return this.renderer.render_stage(more);
    };

    Hub.prototype._add_changed = function(changed, k) {
      var a, _i, _len, _ref;
      if (_params_used[k]) {
        _ref = _params_used[k];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          a = _ref[_i];
          changed[a] = 1;
        }
      }
      return changed[k] = 1;
    };

    Hub.prototype.set_templates = function(style) {
      var k, src;
      this.cstyle = style;
      src = _style_map[style];
      return this.tmpl = new window.Templates((function() {
        var _i, _len, _ref, _results;
        _results = [];
        for (_i = 0, _len = src.length; _i < _len; _i++) {
          k = src[_i];
          _results.push((_ref = window[k + "_templates"]) != null ? _ref : window[k]);
        }
        return _results;
      })());
    };

    Hub.prototype.templates = function() {
      return this.tmpl;
    };

    Hub.prototype.add_implicit_params = function() {
      var any, hub;
      hub = this;
      any = 0;
      $('#solr_context span').each(function() {
        var j;
        j = $(this);
        if (j.text() && (hub.params[this.id] == null)) {
          hub.params[this.id] = j.text();
          any = 1;
        }
        return j.remove();
      });
      return any;
    };

    Hub.prototype.refresh_params = function() {
      var a, b, changed, k, m, match, old_params, old_sections, p, param_source, section, v, x, _ref, _ref1, _ref2;
      changed = {};
      old_params = _kv_copy(this.params);
      old_sections = {};
      for (x in this.sections) {
        old_sections[x] = _kv_copy(this.sections[x]);
      }
      this.params = {};
      this.sections = {};
      this._pair.lastIndex = 0;
      if (window.location.hash.indexOf('=') !== -1) {
        param_source = window.location.hash.substring(1);
      } else {
        param_source = window.location.search.substring(1);
      }
      while (m = this._pair.exec(param_source)) {
        this.params[this._decode(m[1])] = this._decode(m[2]);
      }
      if (this.add_implicit_params()) {
        this.replace_url({});
      }
      this.ddg_style_search();
      for (section in _section_keys) {
        match = _section_keys[section];
        match.lastIndex = 0;
        this.sections[section] = {};
        for (p in this.params) {
          if (m = match.exec(p)) {
            this.sections[section][m[1]] = this.params[p];
          }
        }
      }
      for (k in old_params) {
        v = old_params[k];
        if (this.params[k] !== old_params[k]) {
          this._add_changed(changed, k);
        }
      }
      _ref = this.params;
      for (k in _ref) {
        v = _ref[k];
        if (this.params[k] !== old_params[k]) {
          this._add_changed(changed, k);
        }
      }
      for (section in _section_keys) {
        a = (_ref1 = this.sections[section]) != null ? _ref1 : {};
        b = (_ref2 = old_sections[section]) != null ? _ref2 : {};
        for (k in a) {
          v = a[k];
          if (a[k] !== b[k]) {
            this._add_changed(changed, section);
          }
        }
        for (k in b) {
          v = b[k];
          if (a[k] !== b[k]) {
            this._add_changed(changed, section);
          }
        }
      }
      return changed;
    };

    Hub.prototype.remove_unused_params = function() {
      var changed, k, v, _i, _len, _ref;
      changed = {};
      _ref = ['species', 'idx'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        if (this.params[k] != null) {
          changed[k] = void 0;
        }
      }
      if (((function() {
        var _results;
        _results = [];
        for (k in changed) {
          v = changed[k];
          _results.push(k);
        }
        return _results;
      })()).length) {
        return this.replace_url(changed);
      }
    };

    Hub.prototype.layout = function() {
      var _ref;
      return (_ref = this.params.style) != null ? _ref : 'standard';
    };

    Hub.prototype.query = function() {
      return this.params['q'];
    };

    Hub.prototype.species = function() {
      var _ref;
      return (_ref = this.params['species']) != null ? _ref : '';
    };

    Hub.prototype.sort = function() {
      return this.params['sort'];
    };

    Hub.prototype.page = function() {
      if (this.params['page'] != null) {
        return parseInt(this.params['page']);
      } else {
        return 1;
      }
    };

    Hub.prototype.per_page = function() {
      var _ref;
      return parseInt((_ref = this.params['perpage']) != null ? _ref : $.solr_config('static.ui.per_page'));
    };

    Hub.prototype.fall = function(type) {
      return this.sections['fall'][type] != null;
    };

    Hub.prototype.base = function() {
      return this.config('base')['url'];
    };

    Hub.prototype.columns = function() {
      if (this.params['columns']) {
        return this.params['columns'].split('*');
      } else {
        return $.solr_config('static.ui.columns');
      }
    };

    Hub.prototype.fix_species_url = function(url, actions) {
      var base, main, parts, pos, repl;
      base = '';
      main = url.replace(/^(https?\:\/\/[^/]+)/, (function(g0, g1) {
        base = g1;
        return '';
      }));
      if (main.length === 0 || main.charAt(0) !== '/') {
        return url;
      }
      parts = main.split('/');
      for (pos in actions) {
        repl = actions[pos];
        parts[parseInt(pos) + 1] = repl;
      }
      main = parts.join('/');
      return base + main;
    };

    Hub.prototype.make_url = function(qps) {
      var a, b, species, url;
      url = window.location.href.replace(/\?.*$/, "") + "?";
      url += ((function() {
        var _results;
        _results = [];
        for (a in qps) {
          b = qps[a];
          _results.push("" + (this._encode(a)) + "=" + (this._encode(b)));
        }
        return _results;
      }).call(this)).join(';');
      species = 'Multi';
      if ((qps['facet_species'] != null) && qps['facet_species'] !== 'CrossSpecies') {
        species = qps['facet_species'];
      }
      url = this.fix_species_url(url, {
        0: species
      });
      return url;
    };

    Hub.prototype.fake_history = function() {
      return !(window.history && window.history.pushState);
    };

    Hub.prototype.set_hash = function(v) {
      var w;
      w = window.location;
      if (v.length) {
        return w.hash = v;
      } else {
        return w.href = w.href.substr(0, w.href.indexOf('#') + 1);
      }
    };

    Hub.prototype.fake_history_onload = function() {
      if (this.fake_history()) {
        this.set_hash(window.location.search.substring(1));
        if (!(window.location.search.length > 1)) {
          return window.location.search = 'p=1';
        }
      } else if (window.location.href.indexOf('#') !== -1) {
        return this.set_hash('');
      }
    };

    Hub.prototype.update_url = function(changes, service) {
      var k, qps, url, v;
      if (service == null) {
        service = 1;
      }
      qps = _kv_copy(this.params);
      if ((qps.perpage != null) && parseInt(qps.perpage) === 0) {
        qps.perpage = $.solr_config('static.ui.pagesizes')[0];
      }
      for (k in changes) {
        v = changes[k];
        if (v != null) {
          qps[k] = v;
        }
      }
      for (k in changes) {
        v = changes[k];
        if (!v) {
          delete qps[k];
        }
      }
      url = this.make_url(qps);
      if (this.really_useless_browser()) {
        window.location.hash = url.substring(url.indexOf('?') + 1);
      } else {
        if (this.fake_history()) {
          window.location.hash = url.substring(url.indexOf('?') + 1);
        } else {
          window.history.pushState({}, '', url);
        }
      }
      if (service) {
        this.service();
      }
      return url;
    };

    Hub.prototype.replace_url = function(changes) {
      var k, qps, url, v;
      qps = _kv_copy(this.params);
      for (k in changes) {
        v = changes[k];
        if (v != null) {
          qps[k] = v;
        }
      }
      for (k in changes) {
        v = changes[k];
        if (!v) {
          delete qps[k];
        }
      }
      url = this.make_url(qps);
      if (this.really_useless_browser()) {
        window.location.hash = url.substring(url.indexOf('?') + 1);
      } else {
        if (this.fake_history()) {
          window.location.hash = url.substring(url.indexOf('?') + 1);
        } else {
          window.history.replaceState({}, '', url);
        }
      }
      return url;
    };

    Hub.prototype.sidebar_div = function() {
      return $('#solr_sidebar');
    };

    Hub.prototype.useless_browser = function() {
      if ((document.documentMode != null) && document.documentMode < 9) {
        return true;
      }
      return this.really_useless_browser();
    };

    Hub.prototype.really_useless_browser = function() {
      if ($('body').hasClass('ie67')) {
        return true;
      }
      return false;
    };

    Hub.prototype.configs = {};

    Hub.prototype.config = function(key) {
      var _ref;
      if (this.configs[key] == null) {
        this.configs[key] = $.parseJSON((_ref = $("#solr_config span." + key).text()) != null ? _ref : '{}');
      }
      return this.configs[key];
    };

    Hub.prototype.request = function() {
      return this.source;
    };

    Hub.prototype.current_facets = function() {
      var k, out, v, _ref;
      out = {};
      _ref = this.sections['facet'];
      for (k in _ref) {
        v = _ref[k];
        if (v) {
          out[k] = v;
        }
      }
      return out;
    };

    Hub.prototype.ddg_style_search = function() {
      var code, ddg, key, map, _ref, _results;
      if (this.params.species) {
        delete this.params.species;
        ddg = [];
        this.params.q = this.params.q.replace(/!([a-z]+)/g, function(g0, g1) {
          ddg.push(g1);
          return '';
        });
        _ref = $.solr_config('static.ui.ddg_codes');
        _results = [];
        for (key in _ref) {
          map = _ref[key];
          _results.push((function() {
            var _i, _len, _results1;
            _results1 = [];
            for (_i = 0, _len = ddg.length; _i < _len; _i++) {
              code = ddg[_i];
              if (map[code] != null) {
                _results1.push(this.params[key] = map[code]);
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          }).call(this));
        }
        return _results;
      }
    };

    Hub.prototype.service = function() {
      var changed, request,
        _this = this;
      if (this.first_service) {
        if (document.documentMode && document.documentMode < 8) {
          $('body').addClass('ie67');
        }
        this.fake_history_onload();
      }
      changed = this.refresh_params();
      this.ddg_style_search();
      this.remove_unused_params();
      request = this.request();
      if (this.first_service) {
        if (parseInt(this.params.perpage) === 0) {
          this.replace_url({
            perpage: 10
          });
          this.params.perpage = $.solr_config('static.ui.pagesizes')[0];
        }
        this.render_stage(function() {
          return _this.actions(request, changed);
        });
        return this.first_service = 0;
      } else {
        return this.actions(request, changed);
      }
    };

    Hub.prototype.actions = function(request, changed) {
      var k, v;
      if (changed['results']) {
        this.renderer.render_results();
      }
      if (changed['style']) {
        if (this.cstyle !== this.params.style) {
          window.location.href = this.make_url(this.params);
        }
      }
      this.fix_species_search();
      for (k in changed) {
        v = changed[k];
        this.activate_interest(k);
      }
      $(document).trigger('state_change', [this.params]);
      return $(window).scrollTop(0);
    };

    Hub.prototype.fix_species_search = function() {
      var $menu, $spec,
        _this = this;
      if (!$.solr_config('static.ui.topright_fix')) {
        return;
      }
      if (this.params.facet_species) {
        if (!$('.site_menu .ensembl').length) {
          $menu = $('.site_menu');
          $menu.prepend($menu.find('.ensembl_all').clone(true).addClass('ensembl').removeClass('ensembl_all'));
        }
        $spec = $('.site_menu .ensembl');
        return window.sp_names(this.params.facet_species, function(names) {
          var $img, $input;
          if (!names) {
            return;
          }
          $img = $('img', $spec).attr("src", "/i/species/16/" + names.url + ".png");
          $input = $('input', $spec).val("Search " + _this.params.facet_species + "…");
          $spec.empty().append($img).append("Search " + _this.params.facet_species).append($input);
          $spec.trigger('click');
          return $spec.parents('form').attr('action', "/" + _this.params.facet_species + "/psychic");
        });
      } else {
        $('.site_menu .ensembl').remove();
        $('.site_menu .ensembl_all').trigger('click');
        return $('.site_menu').parents('form').attr('action', "/Multi/psychic");
      }
    };

    return Hub;

  })();

  each_block = function(num, fn) {
    var i, requests, _i;
    requests = [];
    for (i = _i = 0; 0 <= num ? _i < num : _i > num; i = 0 <= num ? ++_i : --_i) {
      requests.push(fn(i));
    }
    return $.when.apply($, requests).then(function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return Array.prototype.slice.call(args);
    });
  };

  body_embeded_species = function() {
    var sp_home;
    sp_home = function(input, request, start, len) {
      if (start === -1) {
        return $.Deferred().resolve([input, input.english ? 1 : 0]);
      } else {
        if (input.english) {
          return $.Deferred().resolve([
            input, [
              {
                name: input.english,
                description: input.english + " species home page for full details of " + input.english + " resources in Ensembl",
                domain_url: '/' + input.latin,
                db: 'none',
                id: input.latin,
                species: input.english,
                feature_type: 'Species Home Page',
                result_style: 'result-type-species-homepage'
              }
            ]
          ]);
        } else {
          return $.Deferred.resolve([{}, {}]);
        }
      }
    };
    return {
      context: function(state, update_seq) {
        var english, k, latin, v, _ref;
        latin = null;
        _ref = $.solr_config('spnames');
        for (k in _ref) {
          v = _ref[k];
          if (state.q_query().match(new RegExp("\\b" + k + "\\b", "gi"))) {
            latin = v;
            english = $.solr_config('revspnames.%', latin);
          }
        }
        return {
          state: state,
          update_seq: update_seq,
          latin: latin,
          english: english
        };
      },
      prepare: function(context, input, tags_in, depart) {
        var queries;
        if (!tags_in.main) {
          return null;
        }
        if (context.english != null) {
          if (tags_in.target_species == null) {
            tags_in.target_species = [];
          }
          tags_in.target_species.push(context.english);
        }
        queries = [[input, tags_in, depart]];
        if (context.english) {
          queries.unshift([
            {
              english: context.english,
              latin: context.latin
            }, {
              sphome: 1
            }, sp_home
          ]);
        }
        return queries;
      }
    };
  };

  body_hgvs_names = function() {
    var hgvs_name;
    hgvs_name = function(input, request, start, len) {
      var id,
        _this = this;
      if (start === -1) {
        return $.Deferred().resolve([input, 1]);
      } else {
        id = input.id;
        return request.raw_ajax({
          id: id
        }, 'hgvs').then(function(data) {
          var list, m, _i, _len, _ref, _ref1, _ref2;
          if (data.links.length) {
            list = "<ul>";
            _ref1 = (_ref = data.links) != null ? _ref : [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              m = _ref1[_i];
              list += '<li><a href="' + m.url + '">' + m.text + '</a>' + ((_ref2 = m.tail) != null ? _ref2 : '') + '</li>';
            }
            list += "</ul>";
            return [
              input, [
                {
                  name: "HGVS Identifier",
                  description: ("'" + data.id + "' is an HGVS identifier.") + list,
                  result_style: 'result-type-species-homepage no-preview',
                  id: data.id
                }
              ]
            ];
          } else {
            return [input, []];
          }
        });
      }
    };
    return {
      context: function(state, update_seq) {
        return {
          state: state,
          update_seq: update_seq
        };
      },
      prepare: function(context, input, tags_in, depart) {
        var id, queries;
        if (!tags_in.main) {
          return null;
        }
        queries = [[input, tags_in, depart]];
        id = input.q;
        if (id.match(/^ENS[GTP]\d{11}\S*[cgp]\./) || id.match(/^(\d{1,2}|[A-Z])\:g\./) || id.match(/^[A-Z]{2}\_\d{5,}\S*\:[cgp]\./)) {
          queries.unshift([
            {
              id: input.q
            }, {}, hgvs_name
          ]);
        }
        return queries;
      }
    };
  };

  body_elevate_quoted = function() {
    return {
      context: function(state, update_seq) {
        return {
          state: state,
          update_seq: update_seq
        };
      },
      prepare: function(context, input, tags_in, depart) {
        var input_quoted, input_unquoted, qq, tags_quoted;
        if (!tags_in.main) {
          return null;
        }
        if (!input.q.match(/[^\w\s]/)) {
          return null;
        }
        if (input.q.match(/"/)) {
          return null;
        }
        qq = '"' + input.q.replace(/\s+/, '" "', 'g') + '"';
        tags_quoted = _clone_object(tags_in);
        tags_quoted.quoted = 1;
        input_quoted = _clone_object(input);
        input_quoted.q = qq;
        input_unquoted = _clone_object(input);
        input_unquoted.q = input.q + ' AND ( NOT ( ' + qq + ' ) )';
        return [[input_quoted, tags_quoted, depart], [input_unquoted, tags_in, depart]];
      }
    };
  };

  traditional_boost = function(q, field, values, boost) {
    var bq, i, s, v, _i, _len;
    bq = [];
    for (i = _i = 0, _len = values.length; _i < _len; i = ++_i) {
      s = values[i];
      v = Math.floor(boost * (values.length - i - 1) / (values.length - 1));
      bq.push(field + ':"' + s + '"' + (v ? "^" + v : ""));
    }
    q.push("( " + bq.join(" OR ") + " )");
    return q;
  };

  better_boost = function(q, field, values, boost) {
    var i, out, s, v, x, _i, _len;
    out = [];
    for (i = _i = 0, _len = values.length; _i < _len; i = ++_i) {
      s = values[i];
      v = Math.floor(boost * (values.length - i - 1) / (values.length - 1));
      if (v) {
        v = '^' + v;
      } else {
        v = '';
      }
      out.push("" + q[0] + v + " AND " + field + ":\"" + s + "\"");
    }
    out = ((function() {
      var _j, _len1, _results;
      _results = [];
      for (_j = 0, _len1 = out.length; _j < _len1; _j++) {
        x = out[_j];
        _results.push("( " + x + " )");
      }
      return _results;
    })()).join(' OR ');
    return [out];
  };

  add_extra_constraints = function(q_in, fq_in, extra) {
    var boost, bq, field, fq, invert, q, s, str, use_better_boost, values, x, _i, _len, _ref;
    q = [q_in];
    fq = fq_in.slice(0);
    use_better_boost = true;
    if (q_in.match(/[ \t]/)) {
      use_better_boost = false;
    }
    if (q_in.match(/^(\w+:)?"[\w ]+"$/)) {
      use_better_boost = true;
    }
    for (_i = 0, _len = extra.length; _i < _len; _i++) {
      _ref = extra[_i], field = _ref[0], invert = _ref[1], values = _ref[2], boost = _ref[3];
      str = ((function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = values.length; _j < _len1; _j++) {
          s = values[_j];
          _results.push(field + ':"' + s + '"');
        }
        return _results;
      })()).join(" OR ");
      str = (invert ? "(NOT ( " + str + " ))" : "( " + str + " )");
      fq.push(str);
      bq = [];
      if (boost != null) {
        if (use_better_boost) {
          q = better_boost(q, field, values, boost);
        } else {
          q = traditional_boost(q, field, values, boost);
        }
      }
    }
    if (q.length > 1) {
      q = ((function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = q.length; _j < _len1; _j++) {
          x = q[_j];
          _results.push("( " + x + " )");
        }
        return _results;
      })()).join(" AND ");
    }
    return [q, fq];
  };

  body_raw_request = function() {
    var raw_request;
    raw_request = function(input, request, start, len) {
      var params,
        _this = this;
      params = _clone_object(input);
      if (start === -1) {
        params.start = 0;
        params.rows = 10;
        return request.raw_ajax(params).then(function(data) {
          var num, _ref, _ref1;
          num = (_ref = data.result) != null ? (_ref1 = _ref.response) != null ? _ref1.numFound : void 0 : void 0;
          return [data, num];
        });
      } else {
        params.rows = len;
        params.start = start;
        return request.raw_ajax(params).then(function(data) {
          var doc, docs, from, h, snippet, to, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
          docs = (_ref = data.result) != null ? (_ref1 = _ref.response) != null ? _ref1.docs : void 0 : void 0;
          for (_i = 0, _len = docs.length; _i < _len; _i++) {
            doc = docs[_i];
            snippet = (_ref2 = data.result) != null ? (_ref3 = _ref2.highlighting) != null ? _ref3[doc.uid] : void 0 : void 0;
            if (snippet != null) {
              _ref4 = $.solr_config('static.ui.hl_transfers');
              for (from in _ref4) {
                to = _ref4[from];
                snippet[to] = snippet[from];
              }
              _ref5 = $.solr_config('static.ui.highlights');
              for (_j = 0, _len1 = _ref5.length; _j < _len1; _j++) {
                h = _ref5[_j];
                if (snippet[h]) {
                  doc[h] = snippet[h].join(' ... ');
                }
              }
            }
          }
          return [data, docs];
        });
      }
    };
    return {
      prepare: function(context, input, tags, depart) {
        return [[input, tags, raw_request]];
      }
    };
  };

  size_cache_q = "";

  size_cache = {};

  stringify_params = function(params) {
    var k, keys, out, v, vals, vs, _i, _j, _k, _len, _len1, _len2;
    vals = [];
    keys = [];
    for (k in params) {
      v = params[k];
      keys.push(k);
    }
    keys.sort();
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      k = keys[_i];
      vals.push("0", k);
      vs = params[k];
      if (!$.isArray(params[k])) {
        vs = ["" + vs];
      }
      vs.sort();
      for (_j = 0, _len1 = vs.length; _j < _len1; _j++) {
        v = vs[_j];
        vals.push("1", v);
      }
    }
    out = [];
    for (_k = 0, _len2 = vals.length; _k < _len2; _k++) {
      v = vals[_k];
      out.push(v.length + "-" + v);
    }
    return out.join('');
  };

  body_cache = function() {
    var try_cache;
    try_cache = function(orig) {
      return function(input, request, start, len) {
        var key;
        if (start === -1) {
          key = stringify_params(input);
          if (size_cache[key] != null) {
            return $.Deferred().resolve(size_cache[key]);
          } else {
            return orig(input, request, start, len).then(function(v) {
              size_cache[key] = v;
              return v;
            });
          }
        } else {
          return orig(input, request, start, len);
        }
      };
    };
    return {
      context: function(state, update_seq) {
        var q;
        q = state.q_query();
        if (size_cache_q !== q) {
          size_cache = {};
        }
        size_cache_q = q;
        return {
          state: state,
          update_seq: update_seq
        };
      },
      prepare: function(context, input, tags, depart) {
        return [[input, tags, try_cache(depart)]];
      }
    };
  };

  body_split_favs = function() {
    var make_extras, normal_extras, prepare;
    make_extras = function(target) {
      var favs, rigid;
      rigid = [];
      favs = _clone_array($.solr_config('user.favs.species'));
      if (target != null) {
        favs = target.concat(favs);
      }
      if (favs.length) {
        rigid.push(['species', [favs], 100]);
      }
      return generate_block_list(rigid);
    };
    normal_extras = make_extras(null);
    prepare = function(context, input_in, tags_in, depart) {
      var extras, fq, input, k, order, out, q, tags, v, x, _i, _len, _ref;
      tags = _clone_object(tags_in);
      if (!tags.main) {
        return null;
      }
      tags.blocks = 1;
      out = [];
      if (tags_in.target_species != null) {
        extras = make_extras(tags_in.target_species);
      } else {
        extras = normal_extras;
      }
      for (_i = 0, _len = extras.length; _i < _len; _i++) {
        x = extras[_i];
        input = _clone_object(input_in);
        _ref = add_extra_constraints(input.q, (function() {
          var _ref, _results;
          _ref = input.fq;
          _results = [];
          for (k in _ref) {
            v = _ref[k];
            _results.push(k + ':"' + v + '"');
          }
          return _results;
        })(), x), q = _ref[0], fq = _ref[1];
        input.q = q;
        input.fq = fq;
        order = context.state.order();
        if (order.length) {
          input.sort = order[0].column + " " + (order[0].order > 0 ? 'asc' : 'desc');
        }
        out.push([input, tags, depart]);
      }
      return out;
    };
    return {
      context: function(state, update_seq) {
        return {
          state: state,
          update_seq: update_seq
        };
      },
      prepare: prepare
    };
  };

  body_restrict_primary = function() {
    return {
      context: function(state, update_seq) {
        return {
          state: state,
          update_seq: update_seq
        };
      },
      prepare: function(context, input, tags, depart) {
        var f, filtered, pfacet, primary, r, _i, _len, _ref;
        primary = $.solr_config('static.ui.facets_primary');
        if (primary) {
          for (pfacet in primary) {
            r = primary[pfacet];
            filtered = false;
            _ref = context.state.filter();
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              f = _ref[_i];
              if ($.inArray(pfacet, f.columns) !== -1) {
                filtered = true;
                break;
              }
            }
            if (!filtered) {
              input.q = "" + input.q + " AND ( " + r + " )";
            }
          }
        }
        return [[input, tags, depart]];
      }
    };
  };

  body_restrict_categories = function() {
    return {
      context: function(state, update_seq) {
        return {
          state: state,
          update_seq: update_seq
        };
      },
      prepare: function(context, input, tags, depart) {
        var filter, types, x;
        types = $.solr_config("static.ui.restrict_facets");
        if (types && types.length) {
          filter = ((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = types.length; _i < _len; _i++) {
              x = types[_i];
              _results.push("feature_type:\"" + x + "\"");
            }
            return _results;
          })()).join(" OR ");
          input.q = "" + input.q + " AND ( " + filter + " )";
        }
        return [[input, tags, depart]];
      }
    };
  };

  body_frontpage_specials = function() {
    return {
      context: function(state, update_seq) {
        return {
          state: state,
          update_seq: update_seq
        };
      },
      inspect: function(context, requests, docs_frags) {
        var i, tops, _i, _ref;
        tops = [];
        if (context.state.start() === 0) {
          for (i = _i = 0, _ref = requests.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            if (requests[i][0] !== -1 && tops.length < context.state.pagesize()) {
              tops = tops.concat(docs_frags[i]);
            }
          }
          tops = tops.slice(0, context.state.pagesize());
        }
        if (context.update_seq !== current_update_seq) {
          return $.Deferred().reject();
        }
        $(document).trigger('main_front_page', [tops, context.state, context.update_seq]);
        return $.Deferred().resolve();
      }
    };
  };

  body_highlights = function() {
    var add_highlight_fields;
    add_highlight_fields = function(orig) {
      return function(input, request, start, len) {
        var v,
          _this = this;
        v = orig(input, request, start, len);
        if (start !== -1) {
          return v.then(function(_arg) {
            var data, doc, docs, h, k, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
            data = _arg[0], docs = _arg[1];
            if (((_ref = data.result) != null ? _ref.highlighting : void 0) != null) {
              for (_i = 0, _len = docs.length; _i < _len; _i++) {
                doc = docs[_i];
                if (doc.uid != null) {
                  if (data.result.highlighting[doc.uid]) {
                    if (data.result.highlighting[doc.uid]._hr) {
                      doc.description += ' <div class="result-hr"> ' + data.result.highlighting[doc.uid]._hr.join(" ") + '</div>';
                    }
                    _ref1 = data.result.highlighting[doc.uid];
                    for (v = _j = 0, _len1 = _ref1.length; _j < _len1; v = ++_j) {
                      k = _ref1[v];
                      if (k === '_hr') {
                        continue;
                      }
                      _ref2 = $.solr_config('static.ui.highlights');
                      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                        h = _ref2[_k];
                        if (doc[h] && snippet[h]) {
                          doc[h] = snippet[h].join(' ... ');
                        }
                      }
                    }
                  }
                }
              }
            }
            return [data, docs];
          });
        }
        return v;
      };
    };
    return {
      prepare: function(context, input, tags, depart) {
        if (!tags.main) {
          return null;
        }
        input.hl = 'true';
        input['hl.fl'] = $.solr_config('static.ui.highlights');
        input['hl.fragsize'] = 500;
        tags.highlighted = 1;
        return [[input, tags, add_highlight_fields(depart)]];
      }
    };
  };

  body_quicklinks = function() {
    var add_quicklinks;
    add_quicklinks = function(orig) {
      return function(input, request, start, len) {
        var v;
        v = orig(input, request, start, len);
        if (start === -1) {
          return v;
        }
        return v.then(function(_arg) {
          var data, doc, docs, found, i, lhs, link, ok, quicklinks, regex, res, url, value, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
          data = _arg[0], docs = _arg[1];
          for (_i = 0, _len = docs.length; _i < _len; _i++) {
            doc = docs[_i];
            quicklinks = [];
            _ref = $.solr_config('static.ui.links');
            for (i = _j = 0, _len1 = _ref.length; _j < _len1; i = ++_j) {
              link = _ref[i];
              ok = true;
              _ref2 = (_ref1 = link.conditions) != null ? _ref1 : {};
              for (value in _ref2) {
                regex = _ref2[value];
                lhs = value.replace(/\{(.*?)\}/g, function(g0, g1) {
                  var _ref3;
                  return (_ref3 = doc[g1]) != null ? _ref3 : '';
                });
                if (!lhs.match(new RegExp(regex))) {
                  ok = false;
                  break;
                }
              }
              if (!ok) {
                continue;
              }
              if (link.result_condition != null) {
                found = false;
                _ref4 = (_ref3 = doc.quick_links) != null ? _ref3 : [];
                for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
                  res = _ref4[_k];
                  if (link.result_condition === res) {
                    found = true;
                    break;
                  }
                }
                if (!found) {
                  continue;
                }
              }
              if (link.result_condition_not != null) {
                _ref6 = (_ref5 = doc.quick_links) != null ? _ref5 : [];
                for (_l = 0, _len3 = _ref6.length; _l < _len3; _l++) {
                  res = _ref6[_l];
                  if (link.result_condition_not === res) {
                    ok = false;
                  }
                }
              }
              if (!ok) {
                continue;
              }
              url = link.url.replace(/\{(.*?)\}/g, function(g0, g1) {
                var _ref7;
                return (_ref7 = doc[g1]) != null ? _ref7 : '';
              });
              quicklinks.push({
                url: url,
                title: link.title
              });
            }
            doc.quicklinks = quicklinks;
          }
          return [data, docs];
        });
      };
    };
    return {
      prepare: function(context, input, tags, depart) {
        if (!tags.main) {
          return null;
        }
        return [[input, tags, add_quicklinks(depart)]];
      }
    };
  };

  body_elevate_crossspecies = function() {
    return {
      prepare: function(context, input, tags, depart) {
        if (tags.main) {
          if (tags.target_species == null) {
            tags.target_species = [];
          }
          tags.target_species.unshift("CrossSpecies");
        }
        return [[input, tags, depart]];
      }
    };
  };

  body_requests = [body_raw_request, body_cache, body_embeded_species, body_hgvs_names, body_elevate_crossspecies, body_frontpage_specials, body_highlights, body_elevate_quoted, body_restrict_categories, body_restrict_primary, body_quicklinks, body_split_favs];

  run_all_prepares = function(contexts, plugins, input) {
    var i, output, p, query, run, tags_in, v, _i, _j, _len, _len1;
    tags_in = {
      main: 1
    };
    run = $.Callbacks("once");
    input = [[input, tags_in, run, null]];
    for (i = _i = 0, _len = plugins.length; _i < _len; i = ++_i) {
      p = plugins[i];
      if (p.prepare != null) {
        output = [];
        for (_j = 0, _len1 = input.length; _j < _len1; _j++) {
          query = input[_j];
          v = p.prepare(contexts[i], query[0], query[1], query[2]);
          if (!v) {
            v = [query];
          }
          output = output.concat(v);
        }
        input = output;
      }
    }
    return output;
  };

  dispatch_main_requests = function(request, state, table, update_seq) {
    var b, blocks, contexts, i, p, plugins, pr, prepares, ret, total, _fn, _i, _j, _len, _len1,
      _this = this;
    plugins = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = body_requests.length; _i < _len; _i++) {
        b = body_requests[_i];
        _results.push(b());
      }
      return _results;
    })();
    contexts = [];
    prepares = [];
    for (i = _i = 0, _len = plugins.length; _i < _len; i = ++_i) {
      p = plugins[i];
      contexts.push(p.context != null ? p.context(state, update_seq) : null);
    }
    prepares = run_all_prepares(contexts, plugins, {
      q: state.q_query(),
      fq: state.q_facets()
    });
    blocks = [];
    _fn = function(pp) {
      return blocks.push(function(request, start, len) {
        return pp[2](pp[0], request, start, len).then(function(data) {
          return data[1];
        });
      });
    };
    for (_j = 0, _len1 = prepares.length; _j < _len1; _j++) {
      pr = prepares[_j];
      _fn(pr);
    }
    total = 0;
    ret = $.Deferred().resolve();
    ret = ret.then(function() {
      return each_block(blocks.length, function(i) {
        return blocks[i](request, -1).then(function(data) {
          total += data;
          return data;
        });
      });
    });
    return ret.then(function(sizes) {
      var local_offset, offset, requests, results, rows_left, _k, _ref;
      if (update_seq !== current_update_seq) {
        return $.Deferred().reject();
      }
      $(document).trigger('num_known', [total, state, update_seq]);
      requests = [];
      offset = 0;
      rows_left = state.pagesize();
      for (i = _k = 0, _ref = blocks.length; 0 <= _ref ? _k < _ref : _k > _ref; i = 0 <= _ref ? ++_k : --_k) {
        if (state.start() < offset + sizes[i] && state.start() + state.pagesize() > offset) {
          local_offset = state.start() - offset;
          if (local_offset < 0) {
            local_offset = 0;
          }
          requests.push([local_offset, rows_left]);
          rows_left -= sizes[i] - local_offset;
        } else {
          requests.push([-1, -1]);
        }
        offset += sizes[i];
      }
      results = each_block(blocks.length, function(i) {
        if (requests[i][0] !== -1) {
          return blocks[i](request, requests[i][0], requests[i][1]);
        }
      });
      results = results.then(function(docs_frags) {
        return each_block(plugins.length, function(i) {
          if (plugins[i].inspect != null) {
            return plugins[i].inspect(contexts[i], requests, docs_frags);
          }
        }).then(function() {
          return docs_frags;
        });
      });
      return [requests, results];
    });
  };

  draw_main_requests = function(t, state, requests, results, update_seq) {
    return results.then(function(docs_frags) {
      var _this = this;
      if (update_seq !== current_update_seq) {
        return $.Deferred().reject();
      }
      return each_block(requests.length, function(i) {
        if (requests[i][0] !== -1) {
          return t.draw_rows({
            rows: docs_frags[i],
            cols: state.columns()
          });
        } else {
          return $.Deferred().resolve(null);
        }
      });
    });
  };

  dispatch_draw_main = function(request, state, table, update_seq) {
    var t,
      _this = this;
    t = table.xxx_table();
    t.reset();
    return dispatch_main_requests(request, state, table, update_seq).then(function(_arg) {
      var req, res;
      req = _arg[0], res = _arg[1];
      return draw_main_requests(t, state, req, res, update_seq);
    });
  };

  dispatch_facet_request = function(request, state, table, update_seq) {
    var f, filter, filtered, fq, k, params, pfacet, primary, q, r, types, v, x, _i, _len, _ref,
      _this = this;
    fq = ((function() {
      var _ref, _results;
      _ref = state.q_facets();
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        _results.push("" + k + ":\"" + v + "\"");
      }
      return _results;
    })()).join(' AND ');
    q = state.q_query();
    primary = $.solr_config('static.ui.facets_primary');
    if (primary) {
      for (pfacet in primary) {
        r = primary[pfacet];
        filtered = false;
        _ref = state.filter();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          f = _ref[_i];
          if ($.inArray(pfacet, f.columns) !== -1) {
            filtered = true;
            break;
          }
        }
        if (!filtered) {
          q = "" + q + " AND ( " + r + " )";
        }
      }
    }
    q = "( NOT species:xxx ) AND ( " + q + " ) AND ( NOT species:yyy )";
    types = $.solr_config("static.ui.restrict_facets");
    if (types && types.length) {
      filter = ((function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = types.length; _j < _len1; _j++) {
          x = types[_j];
          _results.push("feature_type:\"" + x + "\"");
        }
        return _results;
      })()).join(" OR ");
      q = "" + q + " AND ( " + filter + " )";
    }
    params = {
      q: q,
      fq: fq,
      rows: 1,
      'facet.field': (function() {
        var _j, _len1, _ref1, _results;
        _ref1 = $.solr_config('static.ui.facets');
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          k = _ref1[_j];
          _results.push(k.key);
        }
        return _results;
      })(),
      'facet.mincount': 1,
      facet: true
    };
    $(document).trigger('faceting_unknown', [update_seq]);
    return request.raw_ajax(params).then(function(data) {
      var all_facets, facets, _ref1, _ref2, _ref3, _ref4;
      if (update_seq !== current_update_seq) {
        return $.Deferred().reject();
      }
      all_facets = (function() {
        var _j, _len1, _ref1, _results;
        _ref1 = $.solr_config('static.ui.facets');
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          k = _ref1[_j];
          _results.push(k.key);
        }
        return _results;
      })();
      facets = state.q_facets();
      return $(document).trigger('faceting_known', [(_ref1 = data.result) != null ? (_ref2 = _ref1.facet_counts) != null ? _ref2.facet_fields : void 0 : void 0, facets, (_ref3 = data.result) != null ? (_ref4 = _ref3.response) != null ? _ref4.numFound : void 0 : void 0, state, update_seq]);
    });
  };

  generate_block_list = function(rigid) {
    var expand_criteria, remainder_criteria;
    expand_criteria = function(criteria, remainder) {
      var all, boost, h, head, out, r, rec, s, sets, type, _i, _j, _len, _len1, _ref;
      if (criteria.length === 0) {
        return [[]];
      }
      _ref = criteria[0], type = _ref[0], sets = _ref[1], boost = _ref[2];
      head = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = sets.length; _i < _len; _i++) {
          s = sets[_i];
          _results.push([type, false, s, boost]);
        }
        return _results;
      })();
      head.push([type, true, remainder[type]]);
      rec = expand_criteria(criteria.slice(1), remainder);
      all = [];
      for (_i = 0, _len = rec.length; _i < _len; _i++) {
        r = rec[_i];
        for (_j = 0, _len1 = head.length; _j < _len1; _j++) {
          h = head[_j];
          out = _clone_array(r);
          out.push(h);
          all.push(out);
        }
      }
      return all;
    };
    remainder_criteria = function(criteria) {
      var out, s, sets, type, _i, _j, _len, _len1, _ref;
      out = {};
      for (_i = 0, _len = criteria.length; _i < _len; _i++) {
        _ref = criteria[_i], type = _ref[0], sets = _ref[1];
        out[type] = [];
        for (_j = 0, _len1 = sets.length; _j < _len1; _j++) {
          s = sets[_j];
          out[type] = out[type].concat(s);
        }
      }
      return out;
    };
    return expand_criteria(rigid, remainder_criteria(rigid));
  };

  all_requests = {
    main: dispatch_draw_main,
    faceter: dispatch_facet_request
  };

  dispatch_all_requests = function(request, state, table, update_seq) {
    var plugin_actions, plugin_list, q,
      _this = this;
    request.abort_ajax();
    q = state.q_query();
    if (q != null) {
      request.some_query();
    } else {
      request.no_query();
      return $.Deferred().reject();
    }
    plugin_list = [];
    plugin_actions = [];
    $.each(all_requests, function(k, v) {
      plugin_list.push(k);
      return plugin_actions.push(v(request, state, table, update_seq));
    });
    return $.when.apply(this, plugin_actions);
  };

  rate_limiter = window.rate_limiter(1000, 2000);

  current_update_seq = 0;

  xhr_idx = 1;

  Request = (function() {

    function Request(hub) {
      this.hub = hub;
      this.xhrs = {};
    }

    Request.prototype.req_outstanding = function() {
      var k, v;
      return ((function() {
        var _ref, _results;
        _ref = this.xhrs;
        _results = [];
        for (k in _ref) {
          v = _ref[k];
          _results.push(k);
        }
        return _results;
      }).call(this)).length;
    };

    Request.prototype.render_table = function(table, state) {
      current_update_seq += 1;
      $(document).data('update_seq', current_update_seq);
      $(document).trigger('state_known', [state, current_update_seq]);
      return dispatch_all_requests(this, state, table, current_update_seq);
    };

    Request.prototype.abort_ajax = function() {
      var k, x, _ref;
      _ref = this.xhrs;
      for (k in _ref) {
        x = _ref[k];
        x.abort();
      }
      if (this.req_outstanding()) {
        this.hub.spin_down();
      }
      return this.xhrs = {};
    };

    Request.prototype.raw_ajax = function(params, url) {
      var idx, xhr,
        _this = this;
      if (url == null) {
        url = 'search';
      }
      url = $('#species_path').val() + "/Ajax/" + url;
      idx = (xhr_idx += 1);
      xhr = $.ajax({
        url: url,
        data: params,
        traditional: true,
        dataType: 'json'
      });
      if (!this.req_outstanding()) {
        this.hub.spin_up();
      }
      this.xhrs[idx] = xhr;
      xhr = xhr.then(function(data) {
        delete _this.xhrs[idx];
        if (!_this.req_outstanding()) {
          _this.hub.spin_down();
        }
        if (data.error) {
          _this.hub.fail();
          $('.searchdown-box').css('display', 'block');
          return $.Deferred().reject();
        } else {
          _this.hub.unfail();
          return data;
        }
      });
      return xhr;
    };

    Request.prototype.some_query = function() {
      $('.page_some_query').show();
      return $('.page_no_query').hide();
    };

    Request.prototype.no_query = function() {
      $('.page_some_query').hide();
      return $('.page_no_query').show();
    };

    return Request;

  })();

  Renderer = (function() {

    function Renderer(hub, source) {
      this.hub = hub;
      this.source = source;
    }

    Renderer.prototype.page = function(results) {
      var page;
      page = parseInt(this.hub.page());
      if (page < 1 || page > results.num_pages()) {
        return 1;
      } else {
        return page;
      }
    };

    Renderer.prototype.render_stage = function(more) {
      var main;
      $('.nav-heading').hide();
      main = $('#solr_content').empty();
      this.state = new SearchTableState(this.hub, $('#solr_content'), $.solr_config('static.ui.all_columns'));
      $(document).data('templates', this.hub.templates());
      this.table = new window.search_table(this.hub.templates(), this.state, {
        multisort: 0,
        filter_col: 'q',
        chunk_size: 100,
        style_col: 'result_style'
      });
      this.render_style(main, this.table);
      return more();
    };

    Renderer.prototype.render_results = function() {
      this.state.update();
      $('.preview_holder').trigger('preview_close');
      return this.hub.request().render_table(this.table, this.state);
    };

    Renderer.prototype.get_all_data = function(start, num) {
      var fixed_state;
      fixed_state = $.extend(true, {}, this.state);
      fixed_state.pagesize_override = 1000;
      return this.get_data(fixed_state);
    };

    Renderer.prototype.get_data = function(state) {
      var update_seq,
        _this = this;
      if (state == null) {
        state = this.state;
      }
      update_seq = current_update_seq;
      return dispatch_main_requests(this.hub.request(), state, this.table, update_seq).then(function(_arg) {
        var req, res;
        req = _arg[0], res = _arg[1];
        return res.then(function(docs) {
          var d, data, _i, _len;
          data = {
            rows: [],
            cols: state.columns()
          };
          for (_i = 0, _len = docs.length; _i < _len; _i++) {
            d = docs[_i];
            if (d != null) {
              data.rows = data.rows.concat(d);
            }
          }
          return data;
        });
      });
    };

    Renderer.prototype.render_style = function(root, table) {
      var clayout, page,
        _this = this;
      clayout = this.hub.layout();
      page = {
        layouts: {
          entries: [
            {
              label: 'Standard',
              key: 'standard'
            }, {
              label: 'Table',
              key: 'table'
            }
          ],
          title: 'Layout:',
          select: (function(k) {
            $(document).trigger('ga', ['SrchLayout', 'switch', k]);
            return _this.hub.update_url({
              style: k
            });
          })
        },
        table: {
          table_ready: function(el, data) {
            return _this.table.collect_view_model(el, data);
          },
          state: this.state,
          download_curpage: function(el, fn) {
            return _this.get_data().done(function(data) {
              return _this.table.transmit_data(el, fn, data);
            });
          },
          download_all: function(el, fn) {
            return _this.get_all_data().done(function(data) {
              return _this.table.transmit_data(el, fn, data);
            });
          }
        }
      };
      this.hub.templates().generate('page', page, function(out) {
        return root.append(out);
      });
      if (page.layouts.set_fn != null) {
        return page.layouts.set_fn(clayout);
      }
    };

    return Renderer;

  })();

  SearchTableState = (function(_super) {

    __extends(SearchTableState, _super);

    function SearchTableState(hub, source, element, columns) {
      this.hub = hub;
      SearchTableState.__super__.constructor.call(this, source, element, columns);
    }

    SearchTableState.prototype.update = function() {
      var dir, filter, k, parts, v, _ref;
      if (this.hub.sort()) {
        parts = this.hub.sort().split('-', 2);
        if (parts[0] === 'asc') {
          dir = 1;
        } else if (parts[0] === 'desc') {
          dir = -1;
        }
        if (dir) {
          this.order([
            {
              column: parts[1],
              order: dir
            }
          ]);
        }
      }
      this.page(this.hub.page());
      this.e().data('pagesize', this.hub.per_page());
      this.e().data('columns', this.hub.columns());
      this.e().trigger('fix_widths');
      filter = [
        {
          columns: ['q'],
          value: this.hub.query()
        }
      ];
      _ref = this.hub.current_facets();
      for (k in _ref) {
        v = _ref[k];
        filter.push({
          columns: [k],
          value: v
        });
      }
      return this.filter(filter);
    };

    SearchTableState.prototype._is_default_cols = function(columns) {
      var count, k, v, _i, _j, _len, _len1, _ref;
      count = {};
      _ref = $.solr_config('static.ui.columns');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        count[k] = 1;
      }
      for (_j = 0, _len1 = columns.length; _j < _len1; _j++) {
        k = columns[_j];
        count[k]++;
      }
      for (k in count) {
        v = count[k];
        if (v !== 2) {
          return false;
        }
      }
      return true;
    };

    SearchTableState.prototype._extract_filter = function(col) {
      var c, f, val, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.filter();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        _ref1 = f.columns;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          c = _ref1[_j];
          if (c === col) {
            val = f.value;
          }
        }
      }
      return val;
    };

    SearchTableState.prototype.set = function() {
      var columns, dir, state;
      state = {};
      if (this.order().length) {
        dir = (this.order()[0].order > 0 ? 'asc' : 'desc');
        state.sort = dir + "-" + this.order()[0].column;
      }
      state.page = this.page();
      state.perpage = this.pagesize();
      if (state.perpage !== this.hub.per_page()) {
        state.page = 1;
      }
      columns = this.columns();
      if (this._is_default_cols(columns)) {
        state.columns = '';
      } else {
        state.columns = columns.join("*");
      }
      state.q = this._extract_filter('q');
      return this.hub.update_url(state);
    };

    SearchTableState.prototype.q_query = function() {
      var c, fr, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.filter();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fr = _ref[_i];
        _ref1 = fr.columns;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          c = _ref1[_j];
          if (c === 'q') {
            return fr.value;
          }
        }
      }
      return '';
    };

    SearchTableState.prototype.q_facets = function() {
      var c, facets, fr, _i, _j, _len, _len1, _ref, _ref1;
      facets = {};
      _ref = this.filter();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fr = _ref[_i];
        _ref1 = fr.columns;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          c = _ref1[_j];
          if (c !== 'q') {
            facets[c] = fr.value;
          }
        }
      }
      return facets;
    };

    return SearchTableState;

  })(window.TableState);

  $(function() {
    if (code_select()) {
      return window.hub = new Hub(function(hub) {
        hub.service();
        return $(window).on('statechange', function(e) {
          return hub.service();
        });
      });
    }
  });

  remote_log = function(msg) {
    return $.post('/Ajax/report_error', {
      msg: msg,
      type: 'remote log',
      support: JSON.stringify($.support)
    });
  };

  double_trap = 0;

  window.onerror = function(msg, url, line) {
    if (double_trap) {
      return;
    }
    double_trap = 1;
    $.post('/Ajax/report_error', {
      msg: msg,
      url: url,
      line: line,
      type: 'onerror catch',
      support: JSON.stringify($.support)
    });
    return false;
  };

}).call(this);
