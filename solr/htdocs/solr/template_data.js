// Generated by CoffeeScript 1.12.7
(function() {
  var _a, _ajax_json, _clone_object, _lc, _list_string, _make_string, _valueevent, expand_for_desc, expand_for_title, feature_type, format, sequence_type, title_reword, title_type, ucfirst, verbose;

  window.google_templates = {
    chunk: {
      template: "<div>\n  <div style=\"width: 100%\" class='table_row'>\n    <div class='table_result'>\n      <div class='preview_float_click'>\n        <div class='preview_float'></div>\n      </div>\n      <a class='table_toplink'></a>\n      <div class='green_data'>\n        <span class='id'></span>\n        <a href='#' class='location'></a>\n      </div>\n      <div class='description'></div>\n      <div class='quick_links'>\n        <ul>\n          <li><a href=''>link</a></li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</div>",
      directives: {
        '.table_row': {
          'row<-table_row': {
            '.table_toplink@href': 'row.cols.url',
            '.id': 'row.cols.id',
            '.location': 'row.cols.location',
            '.location@href': 'row.cols.location_url',
            '.description': 'row.cols.description',
            '.table_toplink': 'row.cols.title',
            '.quick_links li': {
              'link<-row.cols.quick_links': {
                'a@href': 'link.url',
                'a': 'link.title'
              }
            },
            '@class+': 'row.cols.facets',
            '.table_result@class+': 'row.klass'
          }
        }
      },
      decorate: {
        '.table_result': function(els, data) {
          return els.hover((function(_this) {
            return function(e) {
              var c, el, l, len1, m, p, present, ref1, results1, v;
              el = $(e.target);
              present = {};
              ref1 = el.closest('.table_row').attr('class').split(/\s+/);
              for (l = 0, len1 = ref1.length; l < len1; l++) {
                c = ref1[l];
                m = /result_facet_(.*)/.exec(c);
                if (m != null ? m.length : void 0) {
                  present["solr_menu_class_" + m[1]] = 1;
                }
              }
              $('.remote_hover').removeClass('remote_hover');
              results1 = [];
              for (p in present) {
                v = present[p];
                results1.push($('.' + p).addClass('remote_hover'));
              }
              return results1;
            };
          })(this), (function(_this) {
            return function() {};
          })(this));
        },
        '.preview_float_click': function(els, data) {
          els.on('resized', (function(_this) {
            return function() {
              if ($(window).width() < 1400 || $('#solr_content').hasClass('solr_useless_browser')) {
                els.css('display', 'none');
                $('.preview_holder').css('display', 'none');
                return $('.sidecar_holder').css('display', 'none');
              } else {
                els.css('display', '');
                return $('.preview_holder').css('display', '');
              }
            };
          })(this));
          return els.click(function(e) {
            var holder, left, preview, templates, title, toplink, tr, url;
            tr = $(this).parents('.table_result');
            if (!$(e.target).is('a')) {
              if ($(this).is(':visible')) {
                $('.preview_holder').trigger('preview_close');
                toplink = tr.find('.table_toplink');
                url = toplink.attr('href');
                title = "Preview of " + toplink.text();
                left = tr.offset().left + tr.outerWidth();
                $('.preview_holder').css('left', left + "px");
                holder = $('.preview_holder');
                tr.addClass('table_result_fake_hover');
                templates = $(document).data('templates');
                preview = templates.generate('preview', {
                  url: url,
                  title: title,
                  prepare_extract_info: (function(_this) {
                    return function(iframe) {};
                  })(this)
                }).find('.g_preview');
                holder.append(preview);
                return preview.find('iframe').attr('src', url);
              }
            }
          });
        }
      },
      preproc: function(spec, data) {
        data.table_row = data.rows;
        return [spec, data];
      },
      postproc: function(el, data) {
        var tr;
        $('.table_toplink', el).click(function() {
          return $(document).trigger('ga', ['SrchMainLink', 'standard', $(this).text()]);
        });
        $('.quick_links a', el).click(function() {
          return $(document).trigger('ga', ['SrchQuickLink', $(this).text(), $(this).closest('.table_result').find('.table_toplink').text()]);
        });
        tr = $('.table_result', el);
        $('html').on('resized', function() {
          if ($(window).width() < 1400 || $('#solr_content').hasClass('solr_useless_browser')) {
            return $('.sidecar_holder').hide();
          } else {
            return $('.sidecar_holder').show();
          }
        });
        $(window).load((function(_this) {
          return function() {
            return $('html').trigger('resized');
          };
        })(this));
        $(window).resize((function(_this) {
          return function() {
            return $('html').trigger('resized');
          };
        })(this));
        $('html').trigger('resized');
        $('.preview_float_click', el).trigger('resized');
        $(window).resize((function(_this) {
          return function() {
            return $('.preview_float_click', el).trigger('resized');
          };
        })(this));
        $('.search_table').hover(((function(_this) {
          return function() {
            return true;
          };
        })(this)), (function(_this) {
          return function() {
            return $('.remote_hover').removeClass('remote_hover');
          };
        })(this));
        return $('.solr_page_p_side').hover((function(_this) {
          return function() {
            return $('.remote_hover').removeClass('remote_hover');
          };
        })(this), (function(_this) {
          return function() {};
        })(this));
      },
      more_fixes: ['page', 'fix_g_variation', 'fix_regulation', 'fix_terse', 'fix_minor_types'],
      fixes: {
        global: [
          function(data) {
            data.tp2_row.register(5000, function() {
              var ft, rename;
              ft = data.tp2_row.best('feature_type');
              rename = $.solr_config('static.ui.facets.key=.members.key=.text.singular', 'feature_type', ft);
              if (rename) {
                return data.tp2_row.candidate('feature_type', rename, 10);
              }
            });
            data.tp2_row.register(100, function() {
              var ft;
              ft = data.tp2_row.best('feature_type');
              return data.tp2_row.candidate('title_feature_type', ft, 10);
            });
            data.tp2_row.register(150, function() {
              var dom, loc;
              loc = data.tp2_row.best('location');
              dom = data.tp2_row.best('domain_url');
              if ((loc != null) && (dom != null)) {
                dom = dom.replace(/^\/?/, '').replace(/\/.*$/, '');
                return data.tp2_row.candidate('location_url', ("/" + dom + "/Location/View?r=") + loc, 10);
              }
            });
            data.tp2_row.register(1000, function() {
              var db, ft, id, ref, sp;
              sp = data.tp2_row.best('species');
              db = data.tp2_row.best('database_type');
              ref = data.tp2_row.best('ref_boost');
              ft = data.tp2_row.best('title_feature_type');
              if (ft != null) {
                data.tp2_row.add_value('bracketed-title', ft, 300);
              }
              if ((sp != null) && sp !== 'All') {
                data.tp2_row.add_value('bracketed-title', sp, 200);
              }
              id = data.tp2_row.best('id');
              if (db === 'vega' || id.match(/^OTT/)) {
                data.tp2_row.add_value('bracketed-title', 'Havana', 250);
              }
              if (((ref != null) && ref === 0) && ft === 'Gene') {
                data.tp2_row.add_value('bracketed-title', 'Alternative sequence', 275);
                return data.tp2_row.add_value('new-contents', '<i>Not a Primary Assembly Gene</i>', 200);
              }
            });
            data.tp2_row.register(10000, function() {
              var ft, k, sp, values;
              sp = data.tp2_row.best('species');
              ft = data.tp2_row.best('feature_type');
              if (sp != null) {
                data.tp2_row.add_value('facet', 'result_facet_species_' + sp);
              }
              if (ft != null) {
                data.tp2_row.add_value('facet', 'result_facet_feature_type_' + ft);
              }
              values = (function() {
                var l, len1, ref1, ref2, results1;
                ref2 = (ref1 = data.tp2_row.all_values('facet')) != null ? ref1 : [];
                results1 = [];
                for (l = 0, len1 = ref2.length; l < len1; l++) {
                  k = ref2[l];
                  results1.push(k.value);
                }
                return results1;
              })();
              return data.tp2_row.send('facets', ' ' + values.join(' '));
            });
            data.tp2_row.register(20000, function() {
              var bracketed, k, vals;
              bracketed = data.tp2_row.all_values('bracketed-title');
              if (bracketed != null) {
                vals = (function() {
                  var l, len1, ref1, results1;
                  ref1 = bracketed.sort(function(a, b) {
                    return a.position - b.position;
                  });
                  results1 = [];
                  for (l = 0, len1 = ref1.length; l < len1; l++) {
                    k = ref1[l];
                    results1.push(k.value);
                  }
                  return results1;
                })();
                return data.tp2_row.candidate('bracketed', vals.join(' '), 10);
              }
            });
            return data.tp2_row.register(50000, function() {
              var bracketed, title;
              title = data.tp2_row.best('main-title');
              bracketed = data.tp2_row.best('bracketed');
              if (bracketed != null) {
                title += " (" + bracketed + ")";
              }
              data.tp2_row.send('title', title);
              return data.tp2_row.send('location_url', data.tp2_row.best('location_url'));
            });
          }
        ]
      }
    },
    outer: {
      template: "<div class=\"solr_g_layout\">\n  <div class=\"sidecar_holder table_acc_sidecars\">\n    <div class=\"tophit\"></div>\n    <div class=\"noresults noresults_side\"></div>\n    <div class=\"topgene\"></div>\n  </div>\n  <div class=\"preview_holder\"></div>\n  <div class=\"se_search\">\n    <div class=\"se_query\">\n      <div class='hub_spinner g_spinner'></div>\n      <div class='hub_fail g_fail'></div>\n      <div class=\"solr_query_box\">\n        <div class=\"search_table_prehead_filterctl table_acc_ne\">\n        </div>\n        <div class=\"solr_result_summary\"></div>\n      </div>\n    </div>\n    <div class='search_table_holder page_some_query'>\n      <div class='page_some_results'>\n        <div class='main_topcars'>\n          <div class='searchdown'></div>\n          <div class='noresults noresults_main'></div>\n          <div class='narrowresults'></div>\n          <div class='sidecars'></div>\n        </div>\n        <div class='search_table_proper'>\n        </div>\n        <div class='se_search_table_posttail'>\n          <div class='search_table_posttail_pager table_acc_sw'>\n            <div class=\"pager\"></div>\n          </div>\n        </div>\n      </div>\n      <div class='page_no_results'>\n        <div class=\"table_acc_noresults\"></div>\n        <div class='noresults_maincars'>\n          <div class='sidecars'></div>\n        </div>\n      </div>\n    </div>\n    <div class='page_no_query g_page_no_results'>\n    </div>\n  </div>\n</div>",
      subtemplates: {
        '.tophit': 'tophit',
        '.topgene': 'topgene',
        '.noresults': 'noresults',
        '.searchdown': {
          template: 'searchdown',
          data: ''
        },
        '.narrowresults': 'narrowresults',
        '.pager': {
          template: 'pager',
          data: ''
        },
        '.search_table_prehead_filterctl': {
          template: 'replacement-filter',
          data: ''
        }
      },
      decorate: {
        '.preview_holder': function(els, data) {
          return els.on('preview_close', function() {
            els.empty().css('left', '100%');
            return $('.table_result_fake_hover').removeClass('table_result_fake_hover');
          });
        },
        '.solr_result_summary': function(els, data) {
          return $(document).on('faceting_known', (function(_this) {
            return function(e, faceter, used_facets, num, state, update_seq) {
              var templates;
              templates = $(document).data('templates');
              els.empty();
              if ($(document).data('update_seq') !== update_seq) {
                return;
              }
              els.append(templates.generate('result_summary', {
                query: state.q_query(),
                num: num,
                used_facets: used_facets
              }));
              return $('.search_table_holder').css('margin-top', $('.solr_query_box').height() + 31);
            };
          })(this));
        }
      },
      postproc: function(el, data) {
        $('html').on('wrap', function(e) {
          return $('.maybe_wrap').each(function() {
            var $el;
            $el = $(this);
            $el.css('overflow', 'hidden');
            if (this.clientHeight !== this.scrollHeight || this.clientWidth !== this.scrollWidth) {
              return $el.addClass('was_wrapped');
            }
          });
        });
        return data.table_ready(el, data);
      }
    },
    'result_summary': {
      template: "<div class=\"solr_result_stmt\">\n  <span class=\"solr_result_count\">0</span> results\n  match <span class=\"solr_result_query\">your search</span>\n  <span class=\"solr_result_restricted\">\n    when restricted to\n    <ul>\n      <li>\n        <a href=\"#\">\n          <span class=\"solr_result_fname\">A</span>: \n          <span class=\"solr_result_fval\">AA</span>\n        </a>\n      </li>\n    </ul>\n  </span>\n</div>",
      directives: {
        '.solr_result_count': 'num',
        '.solr_result_query': function(e) {
          return $('<div/>').text(e.context.query).html();
        },
        '.solr_result_restricted': {
          'fs<-facets': {
            'li': {
              'f<-fs': {
                '.solr_result_fname': 'f.left',
                '.solr_result_fval': 'f.right',
                'a@href': 'f.href'
              }
            }
          }
        }
      },
      decorate: {
        'li': function(els, data) {
          return els.click(function(e) {
            $(this).find('a').trigger('click');
            return false;
          });
        },
        'a': function(els, data) {
          return els.each(function() {
            return $(this).click((function(_this) {
              return function(e) {
                var dep, deps, el, href, key, state, sup, value;
                el = $(e.currentTarget);
                href = el.attr('href');
                href = href.substring(href.indexOf('#'));
                state = {
                  page: 1
                };
                key = href.substring(1);
                state['facet_' + key] = '';
                deps = $.solr_config('static.ui.facets_sidebar_deps');
                if (deps != null) {
                  for (dep in deps) {
                    data = deps[dep];
                    for (sup in data) {
                      value = data[sup];
                      if (sup === key) {
                        state['facet_' + dep] = '';
                      }
                    }
                  }
                }
                $(document).trigger('update_state', [state]);
                $(document).trigger('ga', ['SrchGreenCross', href.substring(1)]);
                return false;
              };
            })(this));
          });
        }
      },
      preproc: function(spec, data) {
        var facet_species, facets, k, ref1, ref2, strain_type, v, value;
        facets = [];
        facet_species = (data != null ? (ref1 = data.used_facets) != null ? ref1.species : void 0 : void 0) || '';
        strain_type = $.solr_config('static.ui.strain_type.%', facet_species);
        if (!strain_type) {
          strain_type = 'strain';
        }
        ref2 = data.used_facets;
        for (k in ref2) {
          v = ref2[k];
          value = $.solr_config('static.ui.facets.key=.members.key=.text.plural', k, v);
          if (value == null) {
            value = $.solr_config('static.ui.facets.key=.members.key=.key', k, v);
          }
          if (value == null) {
            value = v;
          }
          facets.push({
            left: $.solr_config('static.ui.facets.key=.text.singular', k).replace(/__strain_type__/, strain_type),
            right: $('<div/>').text(value).html(),
            href: '#' + k
          });
        }
        if (facets.length) {
          data.facets = [facets];
        }
        return [spec, data];
      }
    },
    'replacement-filter': {
      template: "<div>\n  <span>\n    <div>\n      <span class=\"replacement_filter\">\n        <div>\n          <input type=\"text\" placeholder=\"Enter search term...\" data-role=\"none\"/>\n        </div>\n      </span>\n    </div>\n    <span class=\"search_button\"><span class=\"icon\"></span></span>\n  </span>\n</div>",
      decorate: {
        '.search_button': function(els, data) {
          return els.click((function(_this) {
            return function() {
              var q;
              q = els.parents('.se_search').find('.replacement_filter input:not(.solr_ghost)').val();
              return $(document).trigger('maybe_update_state', {
                q: q,
                page: 1
              });
            };
          })(this));
        },
        'input': function(els, data) {
          $(document).on('state_known', function(e, state, update_seq) {
            if ($(document).data('update_seq') !== update_seq) {
              return;
            }
            return els.val(state.q_query());
          });
          return els.searchac().keydown(function(e) {
            if (e.keyCode === 13) {
              $(this).trigger("blur");
              $(this).searchac('close');
              return $(document).trigger('maybe_update_state', {
                q: $(this).val(),
                page: 1
              });
            }
          });
        }
      },
      postproc: function(el, data) {
        $(document).on('maybe_update_state', function(e, change, incr) {
          var ref1;
          $.getJSON("/Multi/Ajax/psychic", {
            q: (ref1 = change.q) != null ? ref1 : ''
          }, function(data) {
            if (data != null ? data.redirect : void 0) {
              $(document).trigger('ga', ['SrchPsychic', 'redirect', data.url]);
              return window.location.href = data.url;
            }
          });
          return $(document).trigger('update_state', change);
        });
        return $(document).on('state_known', function(e, state, update_seq) {
          var f, facets, filter, ids, l, left, len1, ref1, ref2, right, strain_type, texts, title;
          if ($(document).data('update_seq') !== update_seq) {
            return;
          }
          facets = state.q_facets();
          filter = $('.replacement_filter', el);
          texts = [];
          ids = [];
          filter.selbox({
            action: (function(_this) {
              return function(id, text, opts) {
                var label, match;
                match = text.match(/<b>(.*)<\/b>/);
                label = match && match[1] ? match[1] + "-" + id : id;
                $(document).trigger('ga', ['SearchInputFacetDropdown', 'SearchPageResults', label]);
                state = {
                  page: 1
                };
                state['facet_' + id] = '';
                return $(document).trigger('update_state', state);
              };
            })(this),
            selchange: function() {
              return this.centered({
                max: 14,
                inc: 2
              });
            }
          });
          filter.selbox("deactivate");
          title = [];
          ref1 = $.solr_config("static.ui.facets");
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            f = ref1[l];
            if (!facets[f.key]) {
              continue;
            }
            strain_type = $.solr_config('static.ui.strain_type.%', facets.species);
            if (!strain_type) {
              strain_type = 'strain';
            }
            left = ucfirst($.solr_config("static.ui.facets.key=.text.plural", f.key).replace(/__strain_type__/, strain_type));
            right = (ref2 = $.solr_config("static.ui.facets.key=.members.key=.text.plural", f.key, facets[f.key])) != null ? ref2 : $('<div/>').text(facets[f.key]).html();
            texts.push("Search other <i>" + left + "</i>,\nnot just <b>" + right + "</b>.");
            ids.push(f.key);
            title.push($('<div/>').text(right).html());
          }
          data.title = "Only searching " + title.join(" ");
          if (ids.length) {
            return filter.selbox("activate", data.title, texts, ids);
          }
        });
      }
    },
    download: {
      template: "<div></div>"
    },
    preview: {
      template: "<div class=\"g_preview\">\n  <div class=\"g_preview_closer\"></div>\n  <h1>Preview</h1>\n  <ul class=\"g_preview_quick_links\"></ul>\n  <div class=\"g_preview_noclick\">\n    <div class=\"g_preview_noclick_textcarrier\">\n      <span class=\"g_preview_noclick_text\">&#x25BA;</span>\n    </div>\n  </div>\n  <div class='g_preview_spinner_outer preview_spinner'>\n    <div class='g_preview_spinner'>\n      <div class='g_preview_spinner_inner'>\n        <div class='g_preview_spinner_img'></div>\n      </div>\n    </div>\n  </div>\n  <div class=\"g_preview_placer\">\n    <div class=\"g_preview_border\">\n      <div class=\"g_preview_shrinker\">\n        <iframe id=\"preview_iframe\" name=\"preview_iframe\" scrolling=\"no\"></iframe>\n      </div>\n    </div>\n    <div class=\"g_preview_border_s\"></div>\n  </div>\n</div>",
      directives: {
        'h1': 'title'
      },
      decorate: {
        '.g_preview_placer': function(el, data) {
          return el.on('resized', (function(_this) {
            return function() {
              var noclick;
              el.css('width', '');
              el.width(Math.floor(el.width() / 30) * 30 + 1);
              noclick = $('.g_preview_noclick');
              return noclick.css('left', el.offset().left + 50).css('top', el.offset().top + 50).css('width', (el.outerWidth() - 100) + 'px').css('height', (el.outerHeight() - 70) + 'px');
            };
          })(this));
        },
        '#preview_iframe': function(el, data) {
          el.load(function() {
            var button, noclick, placer, scale;
            scale = 0.6;
            placer = $('.g_preview_placer');
            if (el.attr('src')) {
              $('.preview_spinner').hide();
            }
            placer.show();
            placer.trigger('resized');
            $(window).resize(((function(_this) {
              return function() {
                return placer.trigger('resized');
              };
            })(this)));
            noclick = $('.g_preview_noclick');
            button = noclick.find('.g_preview_noclick_text');
            button.css('margin-top', (noclick.height() - button.height()) / 2);
            return noclick.click((function(_this) {
              return function(e) {
                var url;
                url = $(_this).parents('.g_preview').find('iframe').attr('src');
                return window.location.href = url;
              };
            })(this));
          });
          data.prepare_extract_info(el);
          el.on('try_extract_info', function() {
            return setTimeout((function(_this) {
              return function() {
                el.trigger('extract_info');
                if (!el.hasClass('extracted')) {
                  return el.trigger('try_extract_info');
                }
              };
            })(this), 50);
          });
          el.on('extract_info', function() {
            var contents, items, menu;
            if (el.hasClass('extracted')) {
              return true;
            }
            contents = el.contents();
            if (contents.find('.local_context').length === 0) {
              return false;
            }
            menu = $(".local_context", contents);
            items = menu.find('a').clone().wrap('<li></li>').parent();
            items.appendTo(el.parents('.g_preview').find('.g_preview_quick_links'));
            return el.addClass('extracted');
          });
          el.load((function(_this) {
            return function() {
              return el.trigger('extract_info');
            };
          })(this));
          return el.trigger('try_extract_info');
        },
        '.g_preview_closer': function(el, data) {
          return el.on('click', (function(_this) {
            return function() {
              return $('.preview_holder').trigger('preview_close');
            };
          })(this));
        }
      },
      postproc: function(el, data) {
        el.mouseenter((function(_this) {
          return function(e) {
            return data.hover();
          };
        })(this));
        return el.mouseleave((function(_this) {
          return function(e) {
            return data.unhover();
          };
        })(this));
      }
    }
  };

  window.page_templates = {
    page: {
      template: "<div>\n  <div class='solr_page_p_side'>\n    <div class='solr_sidebar  ui-panel ui-panel-position-left ui-panel-display-reveal ui-body-c ui-panel-animate ui-panel-closed' data-role='panel'  id='search_nav'>\n      <div class='new_current_faceter'></div>\n      <div class='faceters'></div>\n      <div class='table_extras'></div>\n      <div class='sizer'></div>\n      <div class='layout_select'></div>\n      <div class='leftcars'><div class='sidecars'></div></div>\n      <div class='tips'></div>\n    </div>\n  </div>\n  <div class='solr_page_p_main'>\n    <div class='table'>\n    </div>\n  </div>\n</div>",
      sockets: {
        '.table_extras': 'sidebar_table_extra'
      },
      decorate: {
        '.hub_spinner': function(el, data) {
          return el.hide();
        },
        '.hub_fail': function(el, data) {
          var m;
          m = /url\("?(.*?)"?\)/.exec(el.css('background-image'));
          if (m != null) {
            return $('<img/>').attr('src', m[1]).appendTo($('<body></body>')).css('display', 'none');
          }
        },
        '.new_current_faceter': function(el, data) {
          return $(document).on('faceting_known', function(e, faceting, values, num, state, update_seq) {
            var templates;
            if ($(document).data('update_seq') !== update_seq) {
              return;
            }
            templates = $(document).data('templates');
            el.empty();
            return el.append(templates.generate('current_facets_sidebar', {
              values: values
            }));
          });
        },
        '.solr_page_p_side': function(el, data) {
          return $(window).scroll((function(_this) {
            return function(e) {
              var masthead, top;
              masthead = 90;
              top = $(window).scrollTop() - masthead;
              if (el.outerHeight(true) - top < $(window).outerHeight(true)) {
                top = el.outerHeight(true) - $(window).outerHeight(true);
                if (top < -masthead) {
                  top = -masthead;
                }
              }
              return el.css('top', (-top) + "px");
            };
          })(this));
        }
      },
      subtemplates: {
        '.faceters': {
          template: 'faceter',
          data: ''
        },
        '.sizer': {
          template: 'sidesizer',
          data: ''
        },
        '.layout_select': {
          template: 'feet',
          data: 'layouts'
        },
        '.table': {
          template: 'outer',
          data: 'table'
        },
        '.tips': {
          template: 'tips',
          data: ''
        }
      },
      postproc: (function(_this) {
        return function(el, data) {
          return $('#ensembl-webpage').addClass('solr_page_p_page');
        };
      })(this),
      fixes: {
        global: [
          function(data) {
            data.tp2_row.register(50, function() {
              var url;
              url = data.tp2_row.best('domain_url');
              if (url) {
                if (!(url != null ? url.match(/^\//) : void 0) && !(url != null ? url.match(/^https?\:/) : void 0)) {
                  url = "/" + url;
                }
                return data.tp2_row.candidate('url', url, 50);
              }
            });
            data.tp2_row.register(100, function() {
              var desc;
              if (data.tp2_row.best('name')) {
                data.tp2_row.candidate('main-title', data.tp2_row.best('name'), 200);
              }
              if (data.tp2_row.best('id')) {
                data.tp2_row.candidate('main-title', data.tp2_row.best('id'), 100);
              }
              if (data.tp2_row.best('description')) {
                data.tp2_row.candidate('main-title', data.tp2_row.best('description'), 10);
              }
              desc = data.tp2_row.best('description');
              if (desc != null) {
                desc = desc.replace(/\[(.*?)\:(.*?)\]/g, function(g0, g1, g2) {
                  data.tp2_row.candidate($.trim(g1).toLowerCase(), $.trim(g2), 50);
                  return '';
                });
                return data.tp2_row.candidate('description', desc);
              }
            });
            data.tp2_row.register(300, function() {
              var id;
              id = data.tp2_row.best('id');
              if (id != null) {
                if (id.match(new RegExp("^OTT"))) {
                  return data.tp2_row.add_value('new-contents', '<i>Havana annotation</i>', 150);
                }
              }
            });
            true;
            data.tp2_row.register(1000, function() {
              var l, len1, link, links, ref1, results1;
              links = data.tp2_row.best('quicklinks');
              ref1 = links != null ? links : [];
              results1 = [];
              for (l = 0, len1 = ref1.length; l < len1; l++) {
                link = ref1[l];
                results1.push(data.tp2_row.add_value("quick_link", link));
              }
              return results1;
            });
            data.tp2_row.register(30000, function() {
              var k;
              return data.tp2_row.send("quick_links", (function() {
                var l, len1, ref1, ref2, results1;
                ref2 = (ref1 = this.all_values("quick_link")) != null ? ref1 : [];
                results1 = [];
                for (l = 0, len1 = ref2.length; l < len1; l++) {
                  k = ref2[l];
                  results1.push(k.value);
                }
                return results1;
              }).call(this));
            });
            true;
            data.tp2_row.register(30000, function() {
              var desc, id, name;
              name = data.tp2_row.best('name');
              id = data.tp2_row.best('id');
              desc = data.tp2_row.best('description');
              if (desc) {
                data.tp2_row.candidate('description', desc, 4);
              }
              if (name) {
                data.tp2_row.candidate('description', name, 3);
              }
              if (id) {
                data.tp2_row.candidate('description', id, 2);
              }
              return data.tp2_row.candidate('description', "<em>No description</em>", 1);
            });
            data.tp2_row.register(40000, function() {
              var desc;
              desc = data.tp2_row.best('description');
              data.tp2_row.add_value('new-contents', desc, 10);
              return data.tp2_row.best('description', '', 100000);
            });
            data.tp2_row.register(50000, function() {
              var c, desc, k, l, len1, tail, vals;
              vals = data.tp2_row.all_values('new-contents');
              vals = (function() {
                var l, len1, ref1, results1;
                ref1 = vals.sort(function(a, b) {
                  return a.position - b.position;
                });
                results1 = [];
                for (l = 0, len1 = ref1.length; l < len1; l++) {
                  k = ref1[l];
                  results1.push(k.value);
                }
                return results1;
              })();
              desc = [];
              tail = "";
              for (l = 0, len1 = vals.length; l < len1; l++) {
                c = vals[l];
                if (!c) {
                  continue;
                }
                c = $.trim(c).replace(new RegExp("\\.$"), '');
                if (c === c.toUpperCase()) {
                  c = c.toLowerCase();
                }
                c = c.charAt(0).toUpperCase() + c.substring(1);
                desc.push(c);
                if (!c.match(/\</)) {
                  tail = ".";
                }
              }
              if (desc.length) {
                data.tp2_row.candidate('description', desc.join(' ') + tail, 10000);
              }
              return true;
            });
            return data.tp2_row.register(51000, function() {
              data.tp2_row.send('description', data.tp2_row.best('description'));
              data.tp2_row.send('id', data.tp2_row.best('id'));
              data.tp2_row.send('url', data.tp2_row.best('url'));
              return true;
            });
          }
        ]
      }
    },
    faceter: {
      template: "<div>\n  <div class=\"table_faceter\">\n  </div>\n</div>",
      directives: {
        '.table_faceter': {
          'f<-faceters': {
            '@data-key': 'f'
          }
        }
      },
      preproc: function(spec, data) {
        data.faceters = $.solr_config('static.ui.facets_sidebar_order');
        return [spec, data];
      },
      postproc: (function(_this) {
        return function(el, odata) {
          $(document).on('faceting_unknown', function(e, update_seq) {
            return $('.table_faceter', el).each(function() {
              if ($(document).data('update_seq') !== update_seq) {
                return;
              }
              if ($(this).data('update_seq') === update_seq) {
                return;
              }
              return $(this).empty();
            });
          });
          return $(document).on('faceting_known', function(e, faceter, query, num, state, update_seq) {
            $('.table_faceter', el).each(function() {
              var deps, fav_order, k, key, l, len1, len2, members, model, o, ok_value, order, short_num, templates, value, values;
              if ($(document).data('update_seq') !== update_seq) {
                return;
              }
              key = $(this).data('key');
              order = [];
              fav_order = $.solr_config('static.ui.facets.key=.fav_order', key);
              if (fav_order != null) {
                order = $.solr_config('user.favs.%', fav_order);
              }
              members = $.solr_config('static.ui.facets.key=.members', key);
              if (members != null) {
                for (l = 0, len1 = members.length; l < len1; l++) {
                  k = members[l];
                  order.push(k.key);
                }
              }
              model = {
                values: faceter[key],
                order: order
              };
              short_num = $.solr_config('static.ui.facets.key=.trunc', key);
              if (query[key]) {
                model.values = [];
              }
              deps = $.solr_config('static.ui.facets_sidebar_deps.%', key);
              if (deps != null) {
                for (k in deps) {
                  values = deps[k];
                  ok_value = false;
                  for (o = 0, len2 = values.length; o < len2; o++) {
                    value = values[o];
                    if ((query[k] != null) && query[k] === value) {
                      ok_value = true;
                      break;
                    }
                  }
                  if (!ok_value) {
                    model.values = [];
                    break;
                  }
                }
              }
              model.key = key;
              templates = $(document).data('templates');
              $(this).data('update_seq', update_seq);
              return $(this).empty().append(templates.generate('faceter_inner', model));
            });
            return $('#main_holder').css('min-height', $('.solr_sidebar').outerHeight(true) + $('.solr_sidebar').offset().top);
          });
        };
      })(this)
    },
    current_faceter: {
      template: "<div class=\"current_table_faceter\"></div>",
      postproc: (function(_this) {
        return function(el, data) {
          if (data.els == null) {
            data.els = [];
          }
          return data.els.push(el);
        };
      })(this)
    },
    'current_faceter_inner': {
      "extends": 'beak',
      preproc: function(spec, data) {
        var ref1;
        ref1 = spec["super"].preproc(spec, data), spec = ref1[0], data = ref1[1];
        return [spec, data];
      }
    },
    sidecars: {
      template: "<div class=\"sidecars\"></div>"
    },
    'tips': {
      template: "<div>\n  <div class=\"sctips solr_beak_p\">\n    <div class=\"solr_beak_p_title\">Tip:</div>\n    <div class=\"sctips-buttons\">\n      <div class=\"sctips-b-prev\"></div>\n      <div class=\"sctips-b-next\"></div>\n    </div>\n    <ul>\n      <li>A tip</li>\n    </ul>\n  </div>\n</div>",
      directives: {
        'li': {
          'tip<-tips': {
            '.': 'tip'
          }
        }
      },
      decorate: {
        'ul': function(els, data) {
          els.on('incr', (function(_this) {
            return function(e, incr) {
              var len, ref1, tip;
              tip = (ref1 = els.data('tip')) != null ? ref1 : 0;
              $(els.find('li')[tip]).css('opacity', 0);
              len = els.find('li').length;
              tip = (tip + len + (incr != null ? incr : 1)) % len;
              els.data('tip', tip);
              return $(els.find('li')[tip]).css('opacity', 1);
            };
          })(this));
          els.on('timeout', (function(_this) {
            return function(e) {
              var now, past, ref1;
              now = new Date().getTime();
              past = (ref1 = els.data('timeout')) != null ? ref1 : now - 1;
              if (past < now && !els.closest('.sctips').hasClass('sctinside')) {
                els.trigger('incr');
                past = now + 15000;
                els.data('timeout', past);
              }
              return setTimeout((function() {
                return els.trigger('timeout');
              }), past - now);
            };
          })(this));
          els.find('li').css('opacity', 0);
          return els.trigger('timeout');
        },
        '.sctips': function(els, data) {
          els.on('mouseenter', (function(_this) {
            return function() {
              return els.closest('.sctips').addClass('sctinside');
            };
          })(this));
          return els.on('mouseleave', (function(_this) {
            return function() {
              return els.closest('.sctips').removeClass('sctinside');
            };
          })(this));
        },
        '.sctips-b-next': function(els, data) {
          return els.on('click', (function(_this) {
            return function() {
              return els.closest('.sctips').find('ul').trigger('incr');
            };
          })(this));
        },
        '.sctips-b-prev': function(els, data) {
          return els.on('click', (function(_this) {
            return function() {
              return els.closest('.sctips').find('ul').trigger('incr', [-1]);
            };
          })(this));
        }
      },
      preproc: function(spec, data) {
        data.tips = $.solr_config('static.ui.tips');
        return [spec, data];
      }
    }
  };

  ucfirst = function(str) {
    return str.charAt(0).toUpperCase() + str.substring(1);
  };

  window.pedestrian_templates = {
    current_facets_sidebar: {
      template: "<div>\n  <div class='solr_faceter solr_beak_p solr_faceter_current solr_menu_current'>\n    <div class='solr_beak_p_title'>Title</div>\n    <div class='solr_curfac_contents'>\n      <div class='solr_curfac_row'>\n        <a class='solr_curfac_left'>\n          All x \n        </a>\n        <span class='solr_curfac_right'>42</span>\n      </div>\n    </div>\n  </div>\n</div>",
      directives: {
        '.solr_beak_p_title': {
          't<-title': {
            '.': 't'
          }
        },
        '.solr_curfac_row': {
          'row<-rows': {
            'a@href': 'row.href',
            '.solr_curfac_left': 'row.left',
            '.solr_curfac_right': 'row.right'
          }
        }
      },
      preproc: function(spec, data) {
        var f, facet_species, facet_species_url_param, l, len1, ref1, ref2, rows, strain_type;
        rows = [];
        facet_species_url_param = new RegExp('[?&;]facet_species(=([^&#;]*)|&|#|$)').exec(window.location.href) || [];
        if (facet_species_url_param[2]) {
          facet_species = decodeURIComponent(facet_species_url_param[2].replace(/\+/g, ' '));
        }
        strain_type = $.solr_config('static.ui.strain_type.%', facet_species);
        if (!strain_type) {
          strain_type = 'strain';
        }
        ref1 = $.solr_config("static.ui.facets");
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          f = ref1[l];
          if (data.values[f.key] != null) {
            rows.push({
              href: "#" + f.key,
              left: "&lt; all " + ucfirst($.solr_config("static.ui.facets.key=.text.plural", f.key).replace(/__strain_type__/, strain_type)),
              right: "Only searching " + ((ref2 = $.solr_config("static.ui.facets.key=.members.key=.text.plural", f.key, data.values[f.key])) != null ? ref2 : $('<div/>').text(data.values[f.key]).html())
            });
          }
        }
        data.rows = rows;
        if (data.rows.length) {
          data.title = [$.solr_config('static.ui.current_facets_heading')];
        } else {
          data.title = [];
        }
        return [spec, data];
      },
      decorate: {
        'a': (function(_this) {
          return function(els, data) {
            return els.click(function(e) {
              var dep, deps, el, href, key, state, sup, value;
              el = $(e.currentTarget);
              href = el.attr('href');
              href = href.substring(href.indexOf('#'));
              state = {
                page: 1
              };
              key = href.substring(1);
              state['facet_' + key] = '';
              deps = $.solr_config('static.ui.facets_sidebar_deps');
              if (deps != null) {
                for (dep in deps) {
                  data = deps[dep];
                  for (sup in data) {
                    value = data[sup];
                    if (sup === key) {
                      state['facet_' + dep] = '';
                    }
                  }
                }
              }
              $(document).trigger('update_state', [state]);
              $(document).trigger('ga', ['SrchFacetLHSOff', href.substring(1)]);
              return false;
            });
          };
        })(this)
      },
      postproc: function(el, data) {
        return $('#main_holder').css('min-height', $('.solr_sidebar').outerHeight(true) + $('.solr_sidebar').offset().top);
      }
    },
    beak: {
      config: {
        short_num: function(data) {
          return $.solr_config('static.ui.facets.key=.trunc', data.type);
        }
      },
      template: "<div>\n  <div class='solr_faceter solr_beak_p'>\n    <div class='solr_beak_p_title'>Title</div>\n    <div class='solr_beak_p_contents'>\n      <a>\n        <span class='solr_beak_p_left'>Hello, World!</span>\n        <span class='solr_beak_p_right'>42</span>\n      </a>\n    </div>\n  </div>\n</div>",
      directives: {
        '.solr_faceter@class+': function(e) {
          var klass;
          klass = '';
          if (e.context.css_class) {
            klass += ' ' + e.context.css_class;
          }
          return klass;
        },
        '.solr_beak_p_title': {
          't<-title': {
            '.': 't'
          }
        },
        'a': {
          'entry<-entries': {
            '@href': function(e) {
              return "#" + e.item.key;
            },
            'span.solr_beak_p_left': 'entry.label.left',
            'span.solr_beak_p_right': 'entry.label.right',
            '@class+': function(e) {
              if (e.item.klass != null) {
                return ' ' + e.item.klass;
              } else {
                return '';
              }
            }
          }
        }
      },
      preproc: function(spec, data) {
        var e, l, len1, ref1;
        data.title = ((data != null ? data.title : void 0) ? [data.title] : []);
        ref1 = data.entries;
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          e = ref1[l];
          if (e.label.left == null) {
            e.label = {
              left: e.label
            };
          }
        }
        return [spec, data];
      },
      decorate: {
        'a': (function(_this) {
          return function(els, data) {
            return els.click(function(e) {
              var el, href;
              el = $(e.currentTarget);
              href = el.attr('href');
              href = href.substring(href.indexOf('#'));
              if (href === '#') {
                data.fold(data.folder_state);
              } else {
                data.select(href.substring(1), el);
              }
              return false;
            });
          };
        })(this),
        '.solr_beak_p': (function(_this) {
          return function(els, data) {
            return els.on('mouseleave', function(e) {
              if (data.fold) {
                data.fold(data.folder_state, true, 30000);
              }
              return false;
            });
          };
        })(this)
      },
      postproc: (function(_this) {
        return function(el, data) {
          return data.set_fn = function(v) {
            $('.solr_feet_p_current', el).removeClass('solr_feet_p_current');
            if (v) {
              return $("a[href='#" + v + "']", el).addClass('solr_feet_p_current');
            }
          };
        };
      })(this)
    },
    faceter_inner: {
      config: {
        short_num: function(data) {
          return $.solr_config('static.ui.facets.key=.trunc', data.type);
        }
      },
      template: "<div>\n  <div class='solr_faceter solr_beak_p'>\n    <div class='solr_beak_p_title'>Title</div>\n    <div class='solr_beak_p_less'>\n      <a href='#'>\n        <span class='solr_beak_p_left'>show fewer species</span>\n      </a>\n    </div>\n    <div class='solr_beak_p_contents'>\n      <a>\n        <span class='solr_beak_p_left'>Hello, World!</span>\n        <span class='solr_beak_p_right'>42</span>\n      </a>\n    </div>\n    <div class='solr_beak_p_more'>\n      <a href='#'>\n        <span class='solr_beak_p_left'>... <b>xxx</b> more species ...</span>\n      </a>\n    </div>\n    <div class='solr_beak_p_less'>\n      <a href='#'>\n        <span class='solr_beak_p_left'>show fewer species</span>\n      </a>\n    </div>\n  </div>\n</div>",
      directives: {
        '.solr_beak_p_title': {
          't<-title': {
            '.': 't'
          }
        },
        '.solr_beak_p_contents a': {
          'entry<-entries': {
            '@class+': function(e) {
              if (e.item.klass != null) {
                return ' ' + e.item.klass;
              } else {
                return '';
              }
            },
            '@href': function(e) {
              return "#" + e.item.key;
            },
            'span.solr_beak_p_left': 'entry.name',
            'span.solr_beak_p_right': 'entry.num'
          }
        },
        '.solr_beak_p_more a': 'more_text',
        '.solr_beak_p_less a': 'less_text'
      },
      decorate: {
        'a': (function(_this) {
          return function(els, data) {
            return els.click(function(e) {
              var el, href, state;
              el = $(e.currentTarget);
              href = el.attr('href');
              href = href.substring(href.indexOf('#'));
              state = {
                page: 1
              };
              state["facet_" + data.key] = href.substring(1);
              $(document).trigger('update_state', [state]);
              $(document).trigger('ga', ['SrchFacetLHSOn', data.key, href.substring(1)]);
              return false;
            });
          };
        })(this),
        '.solr_beak_p': (function(_this) {
          return function(els, data) {
            return els.on('mouseleave', function(e) {
              if (data.fold) {
                data.fold(data.folder_state, true, 30000);
              }
              return false;
            });
          };
        })(this),
        '.solr_beak_p_more a': function(els, data) {
          return els.click(function() {
            var state;
            state = {};
            state["fall_" + data.key] = '1';
            $(document).trigger('update_state', [state]);
            $(document).trigger('ga', ['SrchFacetLHSMore', data.key]);
            return false;
          });
        },
        '.solr_beak_p_less a': function(els, data) {
          return els.click(function() {
            var state;
            state = {};
            state["fall_" + data.key] = '';
            $(document).trigger('update_state', [state]);
            $(document).trigger('ga', ['SrchFacetLHSLess', data.key]);
            return false;
          });
        }
      },
      preproc: function(spec, data) {
        var e, facet_species, facet_species_url_param, i, j, l, len1, len2, name, o, order, orders, ref1, ref2, rename, reo, reorder, short_num, strain_type, title, u;
        data.entries = [];
        orders = data.order.slice(0).reverse();
        reorder = $.solr_config('static.ui.facets.key=.reorder', data.key);
        for (i = l = 0, ref1 = data.values.length / 2 - 1; l <= ref1; i = l += 1) {
          name = data.values[i * 2];
          rename = $.solr_config("static.ui.facets.key=.members.key=.text.singular", data.key, name);
          if (rename != null) {
            name = rename;
          }
          order = $.inArray(name, orders);
          if (order === -1 && reorder) {
            for (j = o = 0, len1 = reorder.length; o < len1; j = ++o) {
              reo = reorder[j];
              if (name.match(reo)) {
                order = j;
                break;
              }
            }
          }
          data.entries.push({
            key: data.values[i * 2],
            name: name,
            order: order,
            num: data.values[i * 2 + 1]
          });
        }
        data.entries = data.entries.sort(function(a, b) {
          if (a.order !== -1 || b.order !== -1) {
            return b.order - a.order;
          }
          return a.name.localeCompare(b.name);
        });
        facet_species_url_param = new RegExp('[?&;]facet_species(=([^&#;]*)|&|#|$)').exec(window.location.href) || [];
        if (facet_species_url_param[2]) {
          facet_species = decodeURIComponent(facet_species_url_param[2].replace(/\+/g, ' '));
        }
        strain_type = $.solr_config('static.ui.strain_type.%', facet_species);
        if (!strain_type) {
          strain_type = 'strain';
        }
        short_num = $.solr_config('static.ui.facets.key=.trunc', data.key);
        title = $.solr_config('static.ui.facets.key=.heading', data.key).replace(/__strain_type__/, strain_type);
        data.more_text = $.solr_config("static.ui.facets.key=.more", data.key).replace(/__strain_type__/, strain_type);
        data.less_text = $.solr_config("static.ui.facets.key=.less", data.key).replace(/__strain_type__/, strain_type);
        data.title = (data.entries.length ? [title] : []);
        ref2 = data.entries;
        for (u = 0, len2 = ref2.length; u < len2; u++) {
          e = ref2[u];
          e.klass = ' solr_menu_class_' + data.key + '_' + e.name;
        }
        data.more_text = data.more_text.replace(/\#\#/, data.entries.length - short_num);
        return [spec, data];
      },
      postproc: function(el, data) {
        $(el).on('trim', function(e, num) {
          var links;
          links = $('.solr_beak_p_contents a', el);
          $('.solr_beak_p_less', el).hide();
          $('.solr_beak_p_more', el).hide();
          if (num > 0) {
            links.css('display', 'block').each(function(i) {
              if (i >= num) {
                return $(this).hide();
              }
            });
            if (links.length > num) {
              $('.solr_beak_p_more', el).css('display', 'block');
            }
          } else if (links.length > -num) {
            links.css('display', 'block');
            $('.solr_beak_p_less', el).css('display', 'block');
          }
          return $('#main_holder').css('min-height', $('.solr_sidebar').outerHeight(true) + $('.solr_sidebar').offset().top);
        });
        data.set_fn = (function(_this) {
          return function(v) {
            $('.solr_feet_p_current', el).removeClass('solr_feet_p_current');
            if (v) {
              return $("a[href='#" + v + "']", el).addClass('solr_feet_p_current');
            }
          };
        })(this);
        $(document).on('state_change', function(e, params) {
          var sense, short_num;
          short_num = $.solr_config('static.ui.facets.key=.trunc', data.key);
          sense = params["fall_" + data.key];
          return el.trigger('trim', [sense ? -short_num : short_num]);
        });
        return $(document).trigger('force_state_change');
      }
    },
    feet: {
      "extends": 'beak',
      preproc: function(spec, data) {
        var ref1, ref2;
        ref1 = spec["super"].preproc(spec, data), spec = ref1[0], data = ref1[1];
        data.css_class = ((ref2 = data.css_class) != null ? ref2 : '') + ' solr_feet_p';
        return [spec, data];
      }
    },
    sctips: {
      template: "<div class=\"sctips solr_beak_p\">\n  <div class=\"solr_beak_p_title\">Tip:</div>\n  <div class=\"sctips_contents\"></div>\n</div>",
      subtemplates: {
        '.sctips_contents': {
          template: 'sctips_contents',
          data: ''
        }
      }
    },
    sidesizer: {
      template: "<div class=\"solr_faceter solr_beak_p solr_feet_p\">\n  <div class=\"solr_beak_p_title\">Per page:</div>\n  <div class='solr_beak_p_contents solr_perpage_list'>\n    <a>\n      <span class='solr_beak_p_left'>42</span>\n      <span class='solr_beak_p_right'></span>\n    </a>\n  </div>\n  <!-- not for now: need to re-engineer\n  <div class='solr_beak_p_contents solr_perpage_all'>\n    <a href=\"#0\">\n      <span class='solr_beak_p_left'>Show all results in one page</span>\n      <span class='solr_beak_p_right'></span>\n    </a>\n  </div>\n  -->\n</div>",
      directives: {
        '.solr_perpage_list a': {
          'entry<-entries': {
            'span.solr_beak_p_left': 'entry.label',
            '@href': function(e) {
              return '#' + e.item.key;
            }
          }
        }
      },
      decorate: {
        'a': function(els, data) {
          return els.click((function(_this) {
            return function(e) {
              var href;
              href = $(e.currentTarget).attr('href');
              href = href.substring(href.indexOf('#'));
              $(document).trigger('update_state', {
                perpage: href.substring(1)
              });
              $(document).trigger('ga', ['SrchPerPage', 'LayoutLHSMenu', href.substring(1)]);
              return false;
            };
          })(this));
        }
      },
      preproc: function(spec, data) {
        var l, len1, ref1, x;
        data.entries = [];
        ref1 = $.solr_config("static.ui.pagesizes");
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          x = ref1[l];
          if (x === 0) {
            continue;
          }
          data.entries.push({
            label: (x ? x : "all"),
            key: x
          });
        }
        return [spec, data];
      },
      postproc: function(el, data) {
        return $(document).on('state_known', function(e, state, update_seq) {
          var pp;
          if ($(document).data('update_seq') !== update_seq) {
            return;
          }
          $('.solr_feet_p_current', el).removeClass('solr_feet_p_current');
          pp = state.pagesize();
          return $("a[href='#" + pp + "']", el).addClass('solr_feet_p_current');
        });
      }
    }
  };

  _ajax_json = function(url, data, success) {
    return $.ajax({
      url: url,
      data: data,
      traditional: true,
      success: success,
      dataType: 'json'
    });
  };

  window.rhs_templates = {
    tophit: {
      template: "<div class=\"solr_tophit\">\n</div>",
      postproc: function(el, data) {
        var render_canvas;
        render_canvas = function(canvas, location, text, colour) {
          var arrow, bp_per_px, chr, ctx, end, h, i, img_start, l, len, line, offset, ref1, size, sstr, start, step, step_start, strand;
          ctx = canvas.getContext('2d');
          line = function(ctx, x, y, w, h) {
            ctx.beginPath();
            ctx.moveTo(x + 0.5, y + 0.5);
            ctx.lineTo(x + w + 0.5, y + h + 0.5);
            ctx.closePath();
            return ctx.stroke();
          };
          arrow = (function(ctx, x, y, s, d) {
            line(ctx, x, y, d * s, -s);
            return line(ctx, x, y, d * s, s);
          });
          ctx.lineWidth = 1;
          ctx.strokeStyle = '#cccccc';
          ref1 = location.split(/[:-]/), chr = ref1[0], start = ref1[1], end = ref1[2], strand = ref1[3];
          start = parseInt(start);
          end = parseInt(end);
          len = end - start + 1;
          size = parseInt('1' + new Array(len.toString().length + 1).join('0'));
          sstr = size.toString().replace(/000$/, 'k').replace(/000k$/, 'M') + 'b';
          img_start = (end + start - size) / 2;
          bp_per_px = size / canvas.width;
          h = canvas.height;
          step = size / 13 / bp_per_px;
          step_start = (Math.floor(img_start / step) * step - img_start) / bp_per_px;
          for (i = l = 0; l <= 13; i = ++l) {
            offset = step_start + step * i;
            line(ctx, offset, 0, 0, h);
            if (!(i % 2)) {
              ctx.fillRect(offset, 0, step, 3);
            }
          }
          ctx.fillStyle = colour;
          ctx.fillRect((start - img_start) / bp_per_px, 30, len / bp_per_px, 6);
          ctx.font = '10px sans-serif';
          text = (parseInt(strand) > 0 ? text + " >" : "< " + text);
          ctx.fillText(text, (start - img_start) / bp_per_px, 25);
          ctx.fillText(location, step_start + step * 4 + 4, 45);
          ctx.strokeStyle = 'black';
          ctx.fillStyle = 'black';
          ctx.lineWidth = 1;
          line(ctx, 0, 0, canvas.width, 0);
          line(ctx, 0, 3, canvas.width, 0);
          line(ctx, step_start + step * 2, 10, step * 4, 0);
          line(ctx, step_start + step * 8, 10, step * 4, 0);
          arrow(ctx, step_start + step * 2, 10, 4, 1);
          arrow(ctx, step_start + step * 12, 10, 4, -1);
          return ctx.fillText(sstr, step_start + step * 6, 15);
        };
        return $(document).on('main_front_page', function(e, results, state, update_seq) {
          var desc, extra, l, latin, len1, tophit;
          if (state.page() !== 1 || !results.length) {
            return;
          }
          for (l = 0, len1 = results.length; l < len1; l++) {
            tophit = results[l];
            el.empty();
            if (tophit == null) {
              continue;
            }
            if (tophit.feature_type !== 'Gene') {
              continue;
            }
            extra = {};
            desc = tophit.description.replace(/\[(.*?)\:(.*?)\]/g, function(g0, g1, g2) {
              extra[$.trim(g1).toLowerCase()] = $.trim(g2);
              return '';
            });
            if (extra.source) {
              extra.source = extra.source.replace(/;/g, '; ');
            }
            latin = $.solr_config('spnames.%', tophit.species);
            _ajax_json("/Multi/Ajax/extra", {
              queries: JSON.stringify({
                queries: [
                  {
                    ft: 'Gene',
                    id: tophit.id,
                    species: latin,
                    req: ['biotype', 'bt_colour'],
                    db: tophit.database_type
                  }
                ]
              })
            }, (function(_this) {
              return function(data) {
                var biotype, bt_colour, ref1, templates;
                if ($(document).data('update_seq') !== update_seq) {
                  return;
                }
                ref1 = data.result, biotype = ref1[0], bt_colour = ref1[1];
                templates = $(document).data("templates");
                el.append(templates.generate('sctophit', {
                  q: state.q_query(),
                  url: tophit.url,
                  name: tophit.name,
                  ft: "Gene",
                  species: tophit.species,
                  source: extra.source,
                  latin: latin,
                  location: tophit.location,
                  render_canvas: render_canvas,
                  biotype: biotype,
                  bt_colour: bt_colour,
                  description: desc
                }));
                return $('html').trigger('wrap');
              };
            })(this));
            return;
          }
        });
      }
    },
    sctophit: {
      template: "<div class=\"sctophit scside\">\n  <div class=\"scth_play\">&#x21AA;</div>\n  <h1>Best gene match</h1>\n  <div class=\"scth_left\">\n    <div class=\"scth_type\"></div>\n    <div class=\"scth_name maybe_wrap\"></div>\n    <div class=\"scth_source\"></div>\n  </div>\n  <div class=\"scth_right\">\n    <div class=\"scth_top\">\n      <div class=\"scth_species\">\n        <img alt=\"\" title=\"\"/>\n      </div>\n      <div class=\"scth_canvas\">\n        <div class=\"scth_canvas_holder\">\n          <canvas width=\"221\" height=\"58\">\n            Click for full details\n          </canvas>\n        </div>\n      </div>\n    </div>\n    <div class=\"scth_biotype\"></div>\n    <div class=\"scth_desc\"></div>\n  </div>\n</div>",
      directives: {
        '.scth_name': 'name',
        '.scth_type': 'title',
        '.scth_source': 'source',
        '.scth_species img@src': 'img',
        '.scth_species img@alt': 'species',
        '.scth_species img@title': 'species',
        '.scth_biotype': 'biotype',
        '.scth_desc': 'description'
      },
      decorate: {
        '.scth_canvas canvas': function(el, data) {
          var arrow, bp_per_px, chr, ctx, end, h, i, img_start, l, len, line, offset, ref1, size, sstr, start, step, step_start, strand, text;
          if (el.length === 0 || (el[0] == null) || (el[0].getContext == null)) {
            return;
          }
          ctx = el[0].getContext('2d');
          line = function(ctx, x, y, w, h) {
            ctx.beginPath();
            ctx.moveTo(x + 0.5, y + 0.5);
            ctx.lineTo(x + w + 0.5, y + h + 0.5);
            ctx.closePath();
            return ctx.stroke();
          };
          arrow = (function(ctx, x, y, s, d) {
            line(ctx, x, y, d * s, -s);
            return line(ctx, x, y, d * s, s);
          });
          ctx.lineWidth = 1;
          ctx.strokeStyle = '#cccccc';
          ref1 = data.location.split(/[:-]/), chr = ref1[0], start = ref1[1], end = ref1[2], strand = ref1[3];
          start = parseInt(start);
          end = parseInt(end);
          len = end - start + 1;
          size = parseInt('1' + new Array(len.toString().length + 1).join('0'));
          sstr = size.toString().replace(/000$/, 'k').replace(/000k$/, 'M') + 'b';
          img_start = (end + start - size) / 2;
          bp_per_px = size / el[0].width;
          h = el[0].height;
          step = size / 13 / bp_per_px;
          step_start = (Math.floor(img_start / step) * step - img_start) / bp_per_px;
          for (i = l = 0; l <= 13; i = ++l) {
            offset = step_start + step * i;
            line(ctx, offset, 0, 0, h);
            if (!(i % 2)) {
              ctx.fillRect(offset, 0, step, 3);
            }
          }
          ctx.fillStyle = data.bt_colour;
          ctx.fillRect((start - img_start) / bp_per_px, 30, len / bp_per_px, 6);
          ctx.font = '10px sans-serif';
          text = (parseInt(strand) > 0 ? data.name + " >" : "< " + data.name);
          ctx.fillText(text, (start - img_start) / bp_per_px, 25);
          ctx.fillText(data.location, step_start + step * 4 + 4, 45);
          ctx.strokeStyle = 'black';
          ctx.fillStyle = 'black';
          ctx.lineWidth = 1;
          line(ctx, 0, 0, el[0].width, 0);
          line(ctx, 0, 3, el[0].width, 0);
          line(ctx, step_start + step * 2, 10, step * 4, 0);
          line(ctx, step_start + step * 8, 10, step * 4, 0);
          arrow(ctx, step_start + step * 2, 10, 4, 1);
          arrow(ctx, step_start + step * 12, 10, 4, -1);
          return ctx.fillText(sstr, step_start + step * 6, 15);
        },
        '.sctophit': function(el, data) {
          return el.on('click', (function(_this) {
            return function(e) {
              $(document).trigger('ga', ['SrchBoxes', 'tophit', data.url]);
              return window.location.href = data.url;
            };
          })(this));
        }
      },
      preproc: function(spec, data) {
        data.img = "/i/species/64/" + data.latin + ".png";
        data.biotype = data.biotype.replace(/_/g, ' ');
        data.biotype = data.biotype + " " + data.ft;
        data.biotype = data.biotype.charAt(0).toUpperCase() + data.biotype.substring(1).toLowerCase();
        data.title = data.species + " " + data.ft;
        return [spec, data];
      }
    },
    'topgene': {
      template: "<div class='solr_topgene'>\n</div>",
      postproc: function(el, data) {
        return $(document).on('main_front_page', function(e, results, state, update_seq) {
          var params;
          el.empty();
          if (state.page() !== 1 || !results.length) {
            return;
          }
          params = {
            q: 'name:"' + state.q_query() + '"',
            rows: 200,
            fq: "feature_type:Gene AND database_type:core",
            'facet.field': "species",
            'facet.mincount': 1,
            facet: true
          };
          return _ajax_json("/Multi/Ajax/search", params, (function(_this) {
            return function(data) {
              var d, docs, favord, i, k, l, len1, len2, o, ref1, ref2, ref3, rows, s, sp_glinks, templates, url, v;
              if ($(document).data('update_seq') !== update_seq) {
                return;
              }
              sp_glinks = {};
              docs = (ref1 = data.result) != null ? (ref2 = ref1.response) != null ? ref2.docs : void 0 : void 0;
              if (docs != null) {
                for (l = 0, len1 = docs.length; l < len1; l++) {
                  d = docs[l];
                  if (d.ref_boost >= 10 && d.species && d.domain_url) {
                    url = d.domain_url;
                    if ((url != null ? url.charAt(0) : void 0) !== '/') {
                      url = "/" + url;
                    }
                    sp_glinks[d.species] = "/" + d.domain_url;
                  }
                }
              }
              if (((function() {
                var results1;
                results1 = [];
                for (k in sp_glinks) {
                  v = sp_glinks[k];
                  results1.push(k);
                }
                return results1;
              })()).length > 0) {
                rows = (function() {
                  var results1;
                  results1 = [];
                  for (k in sp_glinks) {
                    v = sp_glinks[k];
                    results1.push(k);
                  }
                  return results1;
                })();
                favord = [];
                ref3 = $.solr_config('user.favs.species');
                for (i = o = 0, len2 = ref3.length; o < len2; i = ++o) {
                  s = ref3[i];
                  favord[s] = i;
                }
                rows = rows.sort(function(a, b) {
                  if ((favord[a] != null) && ((favord[b] == null) || favord[a] < favord[b])) {
                    return -1;
                  }
                  if (favord[b] != null) {
                    return 1;
                  }
                  return a.localeCompare(b);
                });
                templates = $(document).data("templates");
                return el.append(templates.generate('sctopgene', {
                  urls: sp_glinks,
                  rows: rows,
                  q: state.q_query()
                }));
              }
            };
          })(this));
        });
      }
    },
    sctopgene: {
      template: "<div class=\"sctopgene scside\">\n  <h1>Direct link to genes named \"<span></span>\"</h1>\n  <ul>\n    <li>\n      <a href=\"#\">\n        <img src=\"\" alt=\"\" title=\"\"/>\n      </a>\n    </li>\n  </ul>\n  <div class=\"sctg_dots\">more ...</div>\n</div>",
      directives: {
        'li': {
          'sp<-entries': {
            'img@src': 'sp.url',
            'img@alt': 'sp.name',
            'img@title': 'sp.name',
            'a@href': 'sp.link'
          }
        },
        'h1 span': 'q'
      },
      decorate: {
        '.sctg_dots': function(el, data) {
          if (data.entries.length <= 8) {
            return el.hide();
          }
        },
        '.sctopgene': function(el, data) {
          if (data.entries.length <= 8) {
            return el.css('max-height', 'inherit');
          }
        }
      },
      preproc: function(spec, data) {
        var entries, l, latin, len1, n, ref1;
        entries = [];
        ref1 = data.rows;
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          n = ref1[l];
          latin = $.solr_config("spnames.%", n);
          if (latin) {
            entries.push({
              url: "/i/species/48/" + latin + ".png",
              link: data.urls[n],
              name: n
            });
          }
        }
        data.entries = entries;
        return [spec, data];
      }
    },
    noresultssuggest: {
      template: "<div class=\"scsuggest\">\n  <div class=\"scsug-fold\"><a href='#'>Did you mean... <small>&#x25BC;</small></a></div>\n  <div class=\"scsug-main\">\n    <h1>Suggestions</h1>\n    <div class=\"cloud\">\n      <a href=\"#\">word</a>\n    </div>\n  </div>\n</div>",
      directives: {
        '.cloud a': {
          'word<-suggestions': {
            '.': 'word.word',
            '@href': function(e) {
              return "#" + e.item.word;
            },
            '@style': function(e) {
              var c, col, f, i, l, len1, out, s, w;
              w = e.item.weight;
              col = [3 * 16, 6 * 16, 11 * 16];
              for (i = l = 0, len1 = col.length; l < len1; i = ++l) {
                c = col[i];
                col[i] = Math.floor(w * c + 255 * (1 - w));
              }
              out = "background: rgb(" + col.join(",") + "); color: rgb(";
              s = Math.floor((1 - w) * 64);
              f = Math.floor(w * 12) + 10;
              out += [s, s, s].join(",") + ("); font-size: " + f + "px;");
              return out;
            }
          }
        }
      },
      decorate: {
        '.cloud a': function(els, data) {
          return els.on('click', (function(_this) {
            return function(e) {
              var el, f, href, l, len1, ref1, state;
              el = $(e.currentTarget);
              href = el.attr('href');
              href = href.substring(href.indexOf('#'));
              state = {
                page: 1
              };
              ref1 = $.solr_config('static.ui.facets');
              for (l = 0, len1 = ref1.length; l < len1; l++) {
                f = ref1[l];
                if (f.key === 'species') {
                  continue;
                }
                state["facet_" + f.key] = '';
              }
              state.q = href.substring(1);
              $(document).trigger('update_state', [state]);
              $(document).trigger('ga', ['SrchSuggest', 'click', state.q]);
              return false;
            };
          })(this));
        },
        '.scsug-main': function(els, data) {
          if (data.someresults && data.mainflow) {
            els.addClass('scnbox-hidden');
          }
          return els.addClass(data.mainflow ? 'scnarrow' : 'scside');
        },
        '.scsug-fold': function(els, data) {
          if (!data.someresults || !data.mainflow) {
            return els.hide();
          }
        },
        '.scsug-fold a': function(els, data) {
          return els.on('click', (function(_this) {
            return function() {
              els.closest('.scsuggest').find('.scsug-main').toggleClass('scnbox-hidden');
              return false;
            };
          })(this));
        }
      }
    },
    noresults: {
      template: "<div></div>",
      postproc: function(el, data) {
        return $(document).on('num_known', function(e, num, state, update_seq) {
          var sp_q, species;
          if (!state.q_query()) {
            return;
          }
          species = window.solr_current_species();
          if (!species) {
            species = 'all';
          }
          sp_q = species + '__' + state.q_query().toLowerCase();
          return _ajax_json("/Multi/Ajax/search", {
            'spellcheck.q': sp_q,
            spellcheck: true,
            'spellcheck.count': 50,
            'spellcheck.onlyMorePopular': false
          }, (function(_this) {
            return function(data) {
              var dest, i, l, len1, mainflow, ref1, ref2, ref3, ref4, suggestions, templates, w, word, words;
              if ($(document).data('update_seq') !== update_seq) {
                return;
              }
              suggestions = [];
              words = (ref1 = data.result) != null ? (ref2 = ref1.spellcheck) != null ? (ref3 = ref2.suggestions) != null ? (ref4 = ref3[1]) != null ? ref4.suggestion : void 0 : void 0 : void 0 : void 0;
              if (!(words != null ? words.length : void 0)) {
                return;
              }
              for (i = l = 0, len1 = words.length; l < len1; i = ++l) {
                word = words[i];
                word = word.replace(/^.*?__/, '');
                w = Math.sqrt((words.length - i) / words.length);
                if (num) {
                  w = w / 2;
                }
                suggestions.push({
                  word: word,
                  weight: w * w
                });
              }
              mainflow = num === 0 || !$('.sidecar_holder').is(':visible') || !$('.sidecar_holder').length;
              dest = null;
              el.empty();
              el.each(function() {
                if (mainflow && $(this).closest('.noresults_main').length) {
                  return dest = $(this);
                } else if ((!mainflow) && $(this).closest('.noresults_side').length) {
                  return dest = $(this);
                }
              });
              templates = $(document).data("templates");
              return dest.append(templates.generate('noresultssuggest', {
                suggestions: suggestions,
                someresults: num !== 0,
                mainflow: mainflow
              }));
            };
          })(this));
        });
      }
    },
    narrowresults: {
      template: "<div></div>",
      postproc: function(el, data) {
        return $(document).on('num_known', function(e, num, state, update_seq) {
          var all_facets, f, facets, query;
          el.empty();
          query = state.q_query();
          facets = state.q_facets();
          if (!query || num) {
            return;
          }
          all_facets = (function() {
            var l, len1, ref1, results1;
            ref1 = $.solr_config('static.ui.facets');
            results1 = [];
            for (l = 0, len1 = ref1.length; l < len1; l++) {
              f = ref1[l];
              results1.push(f.key);
            }
            return results1;
          })();
          return _ajax_json("/Multi/Ajax/search", {
            q: query,
            rows: 1,
            'facet.field': all_facets,
            'facet.mincount': 1,
            facet: true
          }, (function(_this) {
            return function(data) {
              var cur_values, entries, facet_species, i, k, l, len1, len2, name, o, othervalues, ref1, ref2, ref3, ref4, ref5, ref6, ref7, strain_type, templates, total, wholesite, yoursearch;
              if ($(document).data('update_seq') !== update_seq) {
                return;
              }
              cur_values = [];
              othervalues = [];
              for (l = 0, len1 = all_facets.length; l < len1; l++) {
                f = all_facets[l];
                if (facets[f]) {
                  cur_values.push([f, facets[f]]);
                }
                if (((ref1 = data.result) != null ? (ref2 = ref1.facet_counts) != null ? (ref3 = ref2.facet_fields) != null ? ref3[f] : void 0 : void 0 : void 0) != null) {
                  entries = 0;
                  total = 0;
                  ref7 = (ref4 = data.result) != null ? (ref5 = ref4.facet_counts) != null ? (ref6 = ref5.facet_fields) != null ? ref6[f] : void 0 : void 0 : void 0;
                  for (i = o = 0, len2 = ref7.length; o < len2; i = ++o) {
                    e = ref7[i];
                    if (i % 2) {
                      entries += 1;
                      total += e;
                    }
                  }
                  if (entries > 0) {
                    facet_species = (facets != null ? facets.species : void 0) || '';
                    strain_type = $.solr_config('static.ui.strain_type.%', facet_species);
                    if (!strain_type) {
                      strain_type = 'strain';
                    }
                    name = $.solr_config('static.ui.facets.key=.text.plural', f).replace(/__strain_type__/, strain_type);
                    othervalues.push({
                      entries: entries,
                      total: total,
                      name: name,
                      facet: f
                    });
                  }
                }
              }
              yoursearch = ((function() {
                var len3, results1, u;
                results1 = [];
                for (u = 0, len3 = cur_values.length; u < len3; u++) {
                  k = cur_values[u];
                  results1.push(k[1]);
                }
                return results1;
              })()).join(" ");
              yoursearch = $('<div/>').text(yoursearch).html();
              wholesite = cur_values.length === 0;
              templates = $(document).data('templates');
              return el.append(templates.generate('noresultsnarrow', {
                q: query,
                yoursearch: yoursearch,
                othervalues: othervalues,
                wholesite: wholesite,
                unrestrict_facets: function() {
                  var len3, u;
                  state = {
                    page: 1
                  };
                  for (u = 0, len3 = all_facets.length; u < len3; u++) {
                    f = all_facets[u];
                    state["facet_" + f] = '';
                  }
                  $(document).trigger('update_state', [state]);
                  return false;
                }
              }));
            };
          })(this));
        });
      }
    },
    searchdown: {
      template: "<div class=\"scnarrow searchdown-box\" style=\"display: none\">\n  <h1>Search server failed to respond</h1>\n  <ul>\n    <li><div><a href=\"#\" onclick=\"location.reload(true); return false;\">Retry this search in a few moments</a></div></li>\n    <li class=\"mirrors\"><div>Use one of our mirror sites: <span class=\"mirror_list\"><a href=\"#\">mirror</a> </span></li>\n    <li><div><a href=\"/Help/Contact/\">Contact us</a> if the problem persists</div></li>\n  </ul>\n</div>",
      directives: {
        '.mirrors': {
          'mirrors<-mirror_list': {
            '.mirror_list': {
              'mirror<-mirrors': {
                'a@href': 'mirror.href',
                'a': 'mirror.text'
              }
            }
          }
        }
      },
      preproc: function(spec, data) {
        var href, mirror, mirrors;
        href = window.location.href;
        mirrors = $.solr_config('static.ui.mirrors');
        if (mirrors.length) {
          data.mirror_list = [
            (function() {
              var l, len1, results1;
              results1 = [];
              for (l = 0, len1 = mirrors.length; l < len1; l++) {
                mirror = mirrors[l];
                href = window.location.href.replace(/\/\/.*?\//, "//" + mirror.host + "/");
                results1.push({
                  href: href,
                  text: mirror.name
                });
              }
              return results1;
            })()
          ];
        }
        return [spec, data];
      }
    },
    noresultsnarrow: {
      template: "<div class=\"scnarrow\">\n  <h1>No results for <em>thing</em> '<i class='search'>search</i>'</h1>\n  <ul>\n    <li class=\"wide\"><div>\n      You were searching the whole site, but still nothing was found.\n    </div></li>\n    <li class=\"narrow_rsid\"><div><strong>\n      You appear to have been searching for a variation rsid.\n      There may be new variants which have not yet been incorporated\n      into Ensembl. If this is the case, you may find information\n      about this variant on the\n      <a href=\"https://www.ncbi.nlm.nih.gov/snp\"\n      >NCBI website</a>\n    </strong></div></li>\n    <li class=\"narrow\"><div>\n      You were only searching <em>thing</em>.\n    </div></li>\n    <li class=\"narrow_any\"><div>\n      And there are <i class=\"count\">42</i> results in\n      <i class=\"all\">all</i> on the whole site.\n      <a href=\"#\">Search full site</a>.\n    </div></li>\n    <li class='narrow_none'><div>\n      But there are no results in\n      any category on the whole site, anyway.\n    </div></li>\n    <li><div class=\"roll_hidden\">\n      <a href=\"#\">More help on searching ...</a>\n      <div class=\"roll_hidden_text\">\n      </div>\n    </div></li>\n  </ul>\n</div>",
      directives: {
        'em': 'yoursearch',
        '.roll_hidden_text': 'noresults_help',
        '.search': function(e) {
          return $('<div/>').text(e.context.q).html();
        },
        '.narrow_any': {
          'x<-narrow_n': {
            '.all': 'all',
            '.count': 'total'
          }
        },
        '.narrow_none': {
          'y<-narrow_none': {}
        },
        '.wide': {
          'w<-wide': {}
        },
        '.narrow': {
          'z<-narrow': {
            'em': 'yoursearch'
          }
        },
        '.narrow_rsid': {
          'y<-rsid': {}
        }
      },
      decorate: {
        '.narrow_any a': (function(_this) {
          return function(els, data) {
            return els.click(function(e) {
              data.unrestrict_facets();
              return false;
            });
          };
        })(this),
        '.roll_hidden': function(els, data) {
          els.children('div').hide();
          return els.children('a').on('click', (function(_this) {
            return function(e) {
              els.children('div').toggle();
              return false;
            };
          })(this));
        }
      },
      preproc: function(spec, data) {
        var l, len1, list, ov, ref1;
        list = [];
        if (data.wholesite) {
          data.wide = [true];
        } else {
          data.narrow = [true];
          ref1 = data.othervalues;
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            ov = ref1[l];
            list.push(ov.entries + " " + ov.name);
            data.total = ov.total;
          }
          if (data.othervalues.length === 0) {
            data.narrow_none = [true];
          } else {
            data.all = list.join(", ");
            data.narrow_n = [true];
          }
        }
        data.noresults_help = $.solr_config('static.ui.noresults_help');
        if (data.q.match(/^rs(\d+)$/)) {
          data.rsid = [true];
        }
        return [spec, data];
      }
    }
  };

  _valueevent = function(obj, ev, fn) {
    return obj.on('change keydown keypress paste cut input', {}, (function(_this) {
      return function(e) {
        var val;
        val = ev();
        if (e.data.old !== val) {
          fn(val);
        }
        return e.data.old = val;
      };
    })(this));
  };

  _clone_object = function(a) {
    return $.extend(true, {}, a);
  };

  window.table_templates = {
    outer: {
      template: "<div class='search_table_holder'>\n  <div class='t_spinner_outer hub_spinner'>\n    <div class='t_spinner'>\n      <div class='t_spinner_inner'>\n        <div class='t_spinner_img'></div>\n      </div>\n    </div>\n  </div>\n  <div class='t_fail_outer hub_fail'>\n    <div class='t_fail'>\n      <div class='t_fail_inner'>\n        <div class='t_fail_img'></div>\n      </div>\n    </div>\n  </div>\n  <div class=\"searchdown\">\n  </div>\n  <div class='search_table_prehead'>\n    <div class=\"search_table_prehead_pagectl table_acc_nw\">\n      <div class=\"sizer\"></div>\n    </div>\n    <div class=\"search_table_prehead_filterctl table_acc_ne\">\n      <div class=\"search_table_filter\"></div>\n      <div class=\"t_download\"></div>\n    </div>\n    <div class=\"search_table_prehead_colctl table_acc_n\">\n      <div class=\"showhide\"></div>\n    </div>\n  </div>\n  <div class='page_some_query'>\n    <div class='search_table_proper page_some_results'>\n    </div>\n  </div>\n  <div class='page_no_query t_page_no_results'>Enter query &#x2197;</div>\n  <div class='search_table_posttail'>\n    <div class='search_table_posttail_pager table_acc_sw'>\n      <div class=\"pager\"></div>\n    </div>\n  </div>\n  <div class='main_topcars t_main_topcars'><div class='sidecars'></div></div>\n</div>",
      subtemplates: {
        '.sizer': {
          template: 'sizer',
          data: ''
        },
        '.showhide': {
          template: 'showhide',
          data: ''
        },
        '.t_download': {
          template: 'download',
          data: ''
        },
        '.pager': {
          template: 'pager',
          data: ''
        },
        '.search_table_filter': {
          template: 'filter',
          data: ''
        },
        '.searchdown': {
          template: 'searchdown',
          data: ''
        }
      },
      decorate: {
        '.t_page_no_query': function(el, data) {
          return el.hide();
        }
      },
      postproc: function(el, data) {
        data.table_ready(el, data);
        el.on('download_curpage', function(e, fn) {
          return data.download_curpage(el, fn);
        });
        return el.on('download_all', function(e, fn) {
          return data.download_all(el, fn);
        });
      }
    },
    pager: {
      template: "<div class=\"table_pager\"></div>",
      postproc: function(els, data) {
        var Pager;
        Pager = (function() {
          function Pager(templates1, state1, i1, n1) {
            this.templates = templates1;
            this.state = state1;
            this.i = i1;
            this.n = n1;
            this.p = this.i;
            if (this.p < 6) {
              this.p = 6;
            }
            if (this.p > this.n - 4) {
              this.p = this.n - 4;
            }
            if (this.p < 1) {
              this.p = 1;
            }
            this.added = 0;
            this.items = [];
          }

          Pager.prototype.add_page = function(i, text) {
            var item;
            item = {
              text: text
            };
            if (i === this.i) {
              item.disabled = 1;
            } else {
              item.page = i;
            }
            this.items.push(item);
            return item;
          };

          Pager.prototype.add_num = function(i) {
            var item;
            if (i <= this.n) {
              if (i > this.added + 1) {
                this.items.push({
                  text: '...',
                  disabled: 1,
                  background: 1
                });
              }
              if (i > this.added) {
                item = this.add_page(i, i);
                if (i === this.i) {
                  item.current = 1;
                }
                return this.added = i;
              }
            }
          };

          Pager.prototype.add_jump = function(i, text) {
            if (i > this.n) {
              i = this.n;
            }
            if (i < 1) {
              i = 1;
            }
            return this.add_page(i, text);
          };

          Pager.prototype.render = function() {
            var click, i, l, o, ref1, ref2, ref3, ref4, u;
            if (!this.n) {
              return;
            }
            this.add_jump(1, '&lt;&lt;');
            this.add_jump(this.i - 1, '&lt;');
            for (i = l = 1; l <= 3; i = ++l) {
              this.add_num(i);
            }
            for (i = o = ref1 = this.p - 2, ref2 = this.p + 2; ref1 <= ref2 ? o <= ref2 : o >= ref2; i = ref1 <= ref2 ? ++o : --o) {
              this.add_num(i);
            }
            for (i = u = ref3 = this.n - 1, ref4 = this.n; ref3 <= ref4 ? u <= ref4 : u >= ref4; i = ref3 <= ref4 ? ++u : --u) {
              this.add_num(i);
            }
            this.add_jump(this.i + 1, '&gt;');
            this.add_jump(this.n, '&gt;&gt;');
            click = (function(_this) {
              return function(i) {
                _this.state.page(i);
                return _this.state.set();
              };
            })(this);
            return this.templates.generate('real_pager', {
              items: this.items,
              click: click
            });
          };

          return Pager;

        })();
        return $(document).on('num_known', function(e, num, state, update_seq) {
          var pages, pagesize, rpager, start, templates;
          if ($(document).data('update_seq') !== update_seq) {
            return;
          }
          els.empty();
          if (state.pagesize()) {
            pagesize = state.pagesize();
            pages = Math.floor((num + pagesize - 1) / pagesize);
            start = Math.floor((state.start() + pagesize) / pagesize);
            templates = $(document).data('templates');
            rpager = new Pager(templates, state, start, pages);
            return els.append(rpager.render());
          }
        });
      }
    },
    real_pager: {
      template: "<div class=\"solr_pager\">\n  <a class=\"solr_pager_entry\" href=\"#\">#</a>\n</div>",
      directives: {
        '.solr_pager_entry': {
          'i<-items': {
            '.': 'i.text',
            '@class+': function(e) {
              var k, l, len1, ref1;
              ref1 = ['background', 'current', 'disabled'];
              for (l = 0, len1 = ref1.length; l < len1; l++) {
                k = ref1[l];
                if (e.item[k]) {
                  return " solr_pager_entry_" + k;
                }
              }
              return "";
            },
            '@href': function(e) {
              var ref1;
              return '#' + ((ref1 = e.item.page) != null ? ref1 : '');
            }
          }
        }
      },
      decorate: {
        'a': function(els, data) {
          return els.click((function(_this) {
            return function(e) {
              var el, href, p;
              el = $(e.currentTarget);
              href = el.attr('href');
              href = href.substring(href.indexOf('#'));
              p = href.substring(1);
              if ((p != null) && p) {
                data.click(p);
              }
              return false;
            };
          })(this));
        }
      }
    },
    filter: {
      template: "<div>\n  <input type=\"text\"/>\n</div>",
      decorate: {
        'input': function(els, data) {
          return els.each((function(_this) {
            return function(i, e) {
              var el;
              el = $(e);
              _valueevent(el, (function() {
                return el.val();
              }), function(value) {
                return $(document).trigger('update_state', {
                  q: value
                });
              });
              return $(document).on('state_known', function(e, state, update_seq) {
                if ($(document).data('update_seq') !== update_seq) {
                  return;
                }
                return el.val(state.q_query());
              });
            };
          })(this));
        }
      }
    },
    sizer: {
      template: "<div class='search_table_sizer'>\n  Show\n  <select>\n    <option>An option</option>\n  </select>\n  entries\n</div>",
      directives: {
        'option': {
          'size<-sizes': {
            '.': function(e) {
              if (e.item) {
                return e.item;
              } else {
                return '&#8734;';
              }
            },
            '@value': 'size'
          }
        }
      },
      decorate: {
        'select': function(els, data) {
          els.change(function(e) {
            var el;
            el = $(e.currentTarget).parents().andSelf().find('select');
            $(document).trigger('ga', ['SrchPerPage', 'Table', el.val()]);
            return $(document).trigger('update_state', {
              perpage: el.val(),
              page: 1
            });
          });
          return $(document).on('state_known', function(e, state, update_seq) {
            if ($(document).data('update_seq') !== update_seq) {
              return;
            }
            return els.val(state.e().data('pagesize'));
          });
        }
      },
      preproc: function(spec, data) {
        data.sizes = $.solr_config('static.ui.pagesizes');
        return [spec, data];
      }
    },
    showhide: {
      template: "<div class=\"search_table_showhide\">\n  <div class=\"search_table_showhide_toggle\">Show/hide columns</div>\n  <ul class=\"search_table_showhide_list\">\n    <li>\n      <input type=\"checkbox\"/>\n      <span>Column</span>\n    </li>\n  </ul>\n</div>",
      directives: {
        'li': {
          'col<-columns': {
            'span': 'col.name',
            '@data-key': 'col.key'
          }
        }
      },
      decorate: {
        'ul': function(els, data) {
          return $(document).on('state_known', function(e, state, update_seq) {
            var k, l, len1, onoff, ref1;
            if ($(document).data('update_seq') !== update_seq) {
              return;
            }
            onoff = {};
            ref1 = state.e().data('columns');
            for (l = 0, len1 = ref1.length; l < len1; l++) {
              k = ref1[l];
              onoff[k] = 1;
            }
            return $('li', this).each(function() {
              var m;
              m = $(this);
              if (onoff[m.data('key')]) {
                return $('input', m).attr('checked', 'checked');
              } else {
                return $('input', m).removeAttr('checked');
              }
            });
          });
        },
        '.search_table_showhide_toggle': function(els, data) {
          var list;
          list = els.parent().find('.search_table_showhide_list');
          els.click((function(_this) {
            return function(e) {
              return list.toggle();
            };
          })(this));
          return list.hide();
        },
        'input': function(els, data) {
          return els.change(function(e) {
            var cols, k, l, len1, new_cols, ref1;
            cols = {};
            $(this).closest('ul').find('li').each(function() {
              var key;
              key = $(this).data('key');
              if ($('input', $(this))[0].checked) {
                return cols[key] = 1;
              }
            });
            new_cols = [];
            ref1 = $.solr_config('static.ui.all_columns');
            for (l = 0, len1 = ref1.length; l < len1; l++) {
              k = ref1[l];
              if (cols[k.key]) {
                new_cols.push(k.key);
              }
            }
            $(document).trigger('update_state', {
              columns: new_cols.join('*')
            });
            return true;
          });
        }
      },
      preproc: function(spec, data) {
        data.columns = $.solr_config('static.ui.all_columns');
        return [spec, data];
      }
    },
    download: {
      template: "<div>\n  <div class='t_download_click'>\n    <div class=\"t_download_popup\">\n      <a href=\"#curpage\">Download what you see</a>\n      <a href=\"#all\">Download whole table (max <i>0</i>)</a>\n    </div>\n  </div>\n  <form class=\"t_download_export\" action=\"/Ajax/table_export\" method=\"post\" style=\"display: none\">\n    <input type=\"hidden\" class=\"filename\" name=\"filename\" value=\"output.csv\" />\n    <input type=\"hidden\" class=\"expopts\" name=\"expopts\" value=\"{}\" />\n    <input type=\"hidden\" class=\"data\" name=\"data\" value=\"\" />\n</form>\n</div>",
      directives: {
        'i': 'limit'
      },
      decorate: {
        '.t_download_click': function(els, data) {
          return els.click(function(e) {
            return $('.t_download_popup', this).toggle();
          });
        },
        '.t_download_popup': function(els, data) {
          return els.hide();
        },
        ".t_download_popup a[href='#curpage']": function(els, data) {
          return els.click((function(_this) {
            return function(e) {
              $(document).trigger('ga', ['SearchPageResults', 'TableExport', 'download_curpage']);
              els.closest('.search_table_holder').trigger('download_curpage', [data.filename]);
              els.parents('.t_download_popup').hide();
              return false;
            };
          })(this));
        },
        ".t_download_popup a[href='#all']": function(els, data) {
          return els.click((function(_this) {
            return function(e) {
              $(document).trigger('ga', ['SearchPageResults', 'TableExport', 'download_all']);
              els.closest('.search_table_holder').trigger('download_all', [data.filename]);
              els.parents('.t_download_popup').hide();
              return false;
            };
          })(this));
        }
      },
      preproc: function(spec, data) {
        data.limit = $.solr_config('static.ui.downloadmaxrows');
        data.filename = $.solr_config('static.ui.downloadfilename');
        return [spec, data];
      }
    },
    chunk: {
      template: "<table style=\"width: 100%; table-layout: fixed\">\n  <thead>\n    <tr><th><span>col</span><div></div></th></tr>\n  </thead>\n  <tbody>\n    <tr><td>data</td></tr>\n  </tbody>\n</table>",
      directives: {
        'thead': {
          'head<-table_thead': {
            'th': {
              'col<-head': {
                'span': 'col.text',
                '@style': 'col.width',
                'div@class+': function(e) {
                  var state;
                  state = e.item.state;
                  if (state) {
                    return " search_table_sorter search_table_sorter_" + state;
                  } else {
                    return "";
                  }
                },
                'div@data-key': 'col.key',
                'div@data-dir': 'col.dir'
              }
            }
          }
        },
        'tbody tr': {
          'row<-table_row': {
            '@class': 'row.klass',
            'td': {
              'col<-row.table_col': {
                '.': 'col.data',
                '@style': 'col.width'
              }
            }
          }
        }
      },
      preproc: function(spec, data) {
        var c, head, i, l, len1, len2, len3, o, ref1, ref2, u;
        data = _clone_object(data);
        data.table_row = data.rows;
        if (data.first) {
          head = [];
          ref1 = data.cols;
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            c = ref1[l];
            head.push(data.headings[c]);
          }
          for (i = o = 0, len2 = head.length; o < len2; i = ++o) {
            c = head[i];
            c.width = "width: " + data.widths[i] + "%";
          }
          data.table_thead = [head];
        } else {
          ref2 = data.cols;
          for (i = u = 0, len3 = ref2.length; u < len3; i = ++u) {
            c = ref2[i];
            data.widths[i] = "width: " + data.widths[i] + "%";
          }
          data.table_thead = [];
        }
        return [spec, data];
      },
      more_fixes: ['page', 'fix_g_variation', 'fix_regulation', 'fix_terse', 'fix_minor_types'],
      postproc: function(el, data) {
        return $('td a', el).click(function() {
          return $(document).trigger('ga', ['SrchMainLink', 'table', $(this).text()]);
        });
      },
      fixes: {
        global: [
          function(data) {
            data.tp2_row.register(2000, function() {
              var id, id_with_url, url;
              url = data.tp2_row.best('url');
              id = data.tp2_row.best('id');
              id_with_url = "<a href='" + url + "'>" + id + "</a>";
              return data.tp2_row.candidate('id_with_url', id_with_url, 300);
            });
            data.tp2_row.register(30000, function() {
              return data.tp2_row.send('id_with_url', data.tp2_row.best('id_with_url'));
            });
            data.tp2.register(10000, function() {
              var c, cols, cv, i, j, l, len1, len2, o, r, ref1, row, row_data, table_row;
              row_data = [];
              table_row = data.tp2.best('table_row');
              cols = data.tp2.best('cols');
              for (i = l = 0, len1 = table_row.length; l < len1; i = ++l) {
                r = table_row[i];
                row = {
                  klass: r.klass,
                  table_col: []
                };
                for (j = o = 0, len2 = cols.length; o < len2; j = ++o) {
                  c = cols[j];
                  cv = {
                    data: (ref1 = r.cols[c]) != null ? ref1 : ''
                  };
                  if (!i) {
                    cv.width = data.widths[j];
                  }
                  row.table_col.push(cv);
                }
                row_data.push(row);
              }
              return data.tp2.candidate('table_row', row_data, 1000);
            });
            data.tp2.register(100000, function() {
              return data.tp2.send('table_row', data.tp2.best('table_row'));
            });
            return true;
          }
        ]
      }
    }
  };

  sequence_type = {
    'contig': 'Contig',
    'clone': 'Clone',
    'chromosome': 'Chromosome',
    'lrg': 'LRG'
  };

  if (window.fixes == null) {
    window.fixes = {};
  }

  window.fixes.fix_minor_types = {
    fixes: {
      global: [
        function(data) {
          data.tp2_row.register(1000, function() {
            var ft, sp;
            ft = data.tp2_row.best('feature_type');
            sp = data.tp2_row.best('species');
            if (ft === 'Phenotype') {
              return data.tp2_row.candidate('id', sp + ' Phenotype', 1000);
            }
          });
          data.tp2_row.register(25000, function() {
            var ft, sp;
            ft = data.tp2_row.best('feature_type');
            if (ft === 'Protein Domain') {
              sp = data.tp2_row.best('species');
              return data.tp2_row.candidate('bracketed', ft + ' in ' + sp, 10000);
            }
          });
          data.tp2_row.register(26000, function() {
            var br, sp, strain, strain_type;
            strain = data.tp2_row.best('strain');
            if (strain != null) {
              sp = data.tp2_row.best('species');
              br = data.tp2_row.best('bracketed');
              strain = strain.replace(/_/g, ' ');
              strain = strain.replace(new RegExp('^' + sp + ' '), '');
              strain_type = $.solr_config('static.ui.strain_type.%', sp);
              if (!strain_type) {
                strain_type = 'Strain';
              }
              strain_type = strain_type.charAt(0).toUpperCase() + strain_type.substring(1);
              return data.tp2_row.candidate('bracketed', br + ', ' + strain_type + ': ' + strain, 15000);
            }
          });
          data.tp2_row.register(300, function() {
            var desc, ft, id, inner_desc, k, m, main_desc, type, v;
            ft = data.tp2_row.best('feature_type');
            if (ft === 'Family') {
              inner_desc = void 0;
              main_desc = data.tp2_row.best('description');
              main_desc = main_desc.replace(/\[(.*?)\]/g, function(g0, g1) {
                inner_desc = $.trim(g1);
                return '';
              });
              main_desc = $.trim(main_desc.replace(/has$/, ''));
              data.tp2_row.candidate('domfam_inner_desc', inner_desc, 1000);
              data.tp2_row.candidate('domfam_rem_desc', main_desc, 1000);
            }
            if (ft === 'Family') {
              data.tp2_row.candidate('title_feature_type', 'Protein Family', 300);
            }
            if (ft === 'Marker') {
              id = data.tp2_row.best('id');
              data.tp2_row.add_value('new-contents', "Marker " + id, 300);
              data.tp2_row.add_value('new-contents', data.tp2_row.best('description'), 1000);
            }
            if (ft === 'Sequence') {
              id = data.tp2_row.best('id');
              desc = data.tp2_row.best('description');
              if (id.match(/^LRG_/)) {
                data.tp2_row.add_value('new-contents', "<i>LRG sequence (Locus Reference Genomic)</i>", 1000);
                data.tp2_row.add_value('new-contents', data.tp2_row.best('description'), 100);
              }
              for (k in sequence_type) {
                v = sequence_type[k];
                if (desc.toLowerCase().substring(0, k.length) === k) {
                  data.tp2_row.add_value('bracketed-title', v, 295);
                }
              }
            }
            if (ft === 'GenomicAlignment') {
              desc = data.tp2_row.best('description');
              if (desc.match(/ESTs?/)) {
                data.tp2_row.candidate('title_feature_type', 'EST', 300);
              } else {
                data.tp2_row.candidate('title_feature_type', 'Genomic Alignment', 150);
              }
            }
            if (ft === 'ProbeFeature') {
              type = ['Probe'];
              desc = data.tp2_row.best('description');
              m = desc.match(/^([A-Z]+) probe/);
              if ((m != null ? m[0] : void 0) != null) {
                type.unshift(m[1]);
              }
              return data.tp2_row.candidate('title_feature_type', type.join(' '), 300);
            }
          });
          data.tp2_row.register(1000, function() {
            var ft, idx, inner, l, len1, main, p, prefix_contents, rem;
            prefix_contents = void 0;
            ft = data.tp2_row.best('feature_type');
            rem = data.tp2_row.best('domfam_rem_desc');
            inner = data.tp2_row.best('domfam_inner_desc');
            main = void 0;
            if (ft === 'Protein Domain') {
              main = inner;
              prefix_contents = [rem, inner];
            } else if (ft === 'Family') {
              main = 'Protein Family ' + data.tp2_row.best('id');
              prefix_contents = [main, inner];
            }
            if (prefix_contents != null) {
              for (idx = l = 0, len1 = prefix_contents.length; l < len1; idx = ++l) {
                p = prefix_contents[idx];
                if (p != null ? p.match(/\w/) : void 0) {
                  data.tp2_row.add_value('new-contents', p, 100 * idx + 100);
                }
              }
            }
            if (main != null) {
              return data.tp2_row.candidate('main-title', main, 300);
            }
          });
          return true;
        }
      ]
    }
  };

  title_reword = {
    'cisRED motifs': 'cisRED',
    'cisRED search regions': 'cisRED',
    'VISTA enhancer set': 'VISTA',
    'miRanda miRNA targets': 'miRanda'
  };

  expand_for_desc = {
    'VISTA': 'the VISTA enhancer set',
    'miRanda': 'the miRanda miRNA target predictions'
  };

  expand_for_title = {
    'RNA': 'miRNA',
    'Search Region': 'Search region'
  };

  feature_type = {
    'Regulatory Motif': 'Feature'
  };

  format = {
    _default: "{reg_id} is [${reg_what_desc}$] from {reg_from_desc} {reg_tail}",
    miranda: "{reg_id} is a miRanda miRNA target prediction {reg_tail}",
    cisred: "{reg_id} is [{reg_from_desc}] <{reg_what_desc}> {reg_tail}"
  };

  _a = function(word) {
    var a_an;
    a_an = 'aeiouAEIOU'.indexOf(word.charAt(0)) !== -1 || $.inArray(word.toLowerCase(), ['rna']) !== -1;
    return (a_an ? 'an ' : 'a ') + word;
  };

  _lc = function(word) {
    var w;
    w = word.toLowerCase();
    if ($.inArray(w, ['rna']) !== -1) {
      return word.toUpperCase();
    } else {
      return w;
    }
  };

  if (window.fixes == null) {
    window.fixes = {};
  }

  window.fixes.fix_regulation = {
    fixes: {
      global: [
        function(data) {
          data.tp2_row.register(150, function() {
            var desc, from, ft, m, ref1, reg_from, reg_id, reg_tail, reg_what, to;
            ft = data.tp2_row.best('feature_type');
            if (ft === 'RegulatoryFeature') {
              desc = data.tp2_row.best('description');
              m = desc.match(/^(\S+) is a (.*?) from (.*?) (which hits .*)$/);
              if (m != null) {
                ref1 = m.slice(1, 5), reg_id = ref1[0], reg_what = ref1[1], reg_from = ref1[2], reg_tail = ref1[3];
                for (from in title_reword) {
                  to = title_reword[from];
                  if (reg_what === from) {
                    reg_what = to;
                  }
                  if (reg_from === from) {
                    reg_from = to;
                  }
                }
                data.tp2_row.candidate('reg_id', reg_id, 50);
                data.tp2_row.candidate('reg_what', reg_what, 50);
                data.tp2_row.candidate('reg_from', reg_from, 50);
                data.tp2_row.candidate('reg_tail', reg_tail, 50);
              }
            }
            return true;
          });
          data.tp2_row.register(300, function() {
            var match, name, reg_from, reg_what;
            reg_what = data.tp2_row.best('reg_what');
            reg_from = data.tp2_row.best('reg_from');
            for (match in feature_type) {
              name = feature_type[match];
              if (reg_what === match || reg_from === match) {
                data.tp2_row.candidate('title_feature_type', name, 100);
              }
            }
            if (data.tp2_row.best('feature_type') === 'RegulatoryFeature') {
              data.tp2_row.candidate('title_feature_type', 'Regulatory Feature', 80);
            }
            return true;
          });
          data.tp2_row.register(1000, function() {
            var from, ref1, ref2, reg_from, reg_what, to, what;
            reg_what = data.tp2_row.best('reg_what');
            reg_from = data.tp2_row.best('reg_from');
            if (reg_from) {
              from = (ref1 = expand_for_title[reg_from]) != null ? ref1 : reg_from;
              data.tp2_row.add_value('bracketed-title', from, 260);
            }
            if (reg_what) {
              what = (ref2 = expand_for_title[reg_what]) != null ? ref2 : reg_what;
              data.tp2_row.add_value('bracketed-title', what, 280);
            }
            for (from in expand_for_desc) {
              to = expand_for_desc[from];
              if (reg_what === from) {
                reg_what = to;
              }
              if (reg_from === from) {
                reg_from = to;
              }
            }
            data.tp2_row.candidate('reg_what_desc', reg_what, 100);
            data.tp2_row.candidate('reg_from_desc', reg_from, 100);
            return true;
          });
          return data.tp2_row.register(2000, function() {
            var c, ref1, reg_from;
            reg_from = data.tp2_row.best('reg_from');
            if (!reg_from) {
              return;
            }
            c = ((ref1 = format[reg_from.toLowerCase()]) != null ? ref1 : format._default).replace(/\{(.*?)\}/g, (function(g0, g1) {
              return data.tp2_row.best(g1);
            })).replace(/\$(.*?)\$/g, (function(g0, g1) {
              return _lc(g1);
            })).replace(/\[(.*?)\]/g, (function(g0, g1) {
              return _a(g1);
            }));
            data.tp2_row.add_value('new-contents', c, 100);
            data.tp2_row.candidate('description', '', 500);
            return true;
          });
        }
      ]
    }
  };

  verbose = {
    Documentation: {
      id: '{subtype} #',
      title: '{article_title}'
    }
  };

  _make_string = function(r, template) {
    var failed, out;
    failed = false;
    out = template.replace(/\{(.*?)\}/g, function(g0, g1) {
      var v;
      v = r.best(g1);
      if (v == null) {
        failed = true;
      }
      return v;
    });
    if (failed) {
      return void 0;
    }
    return out;
  };

  if (window.fixes == null) {
    window.fixes = {};
  }

  window.fixes.fix_terse = {
    fixes: {
      global: [
        function(data) {
          data.tp2_row.register(100, function() {
            var ft, m, url;
            url = data.tp2_row.best('domain_url');
            url = url.replace(/https?:\/\/.*?\//, '/');
            if (url !== '' && url[0] !== '/') {
              url = '/' + url;
            }
            data.tp2_row.candidate('url', url, 500);
            ft = data.tp2_row.best('feature_type');
            if (url) {
              data.tp2_row.candidate('subtype', 'ID', 10);
              m = url.match(/Help\/([a-zA-z]+)/);
              if (m != null) {
                return data.tp2_row.candidate('subtype', m[1], 100);
              }
            }
          });
          data.tp2_row.register(150, function() {
            if (data.tp2_row.best('feature_type') === 'Documentation') {
              return data.tp2_row.candidate('id', data.tp2_row.best('url'), 100);
            }
          });
          data.tp2_row.register(300, function() {
            var ft, id, t, title, v;
            ft = data.tp2_row.best('feature_type');
            v = verbose[ft];
            if ((v != null ? v.title : void 0) != null) {
              t = data.tp2_row.best('main-title');
              title = _make_string(data.tp2_row, v.title);
              data.tp2_row.candidate('main-title', title, 300);
            }
            if ((v != null ? v.id : void 0) != null) {
              id = data.tp2_row.best('id');
              id = _make_string(data.tp2_row, v.id) + id;
              return data.tp2_row.candidate('id', id, 300);
            }
          });
          return true;
        }
      ]
    }
  };

  _list_string = function(singular, plural, data, tail, flip, wrap) {
    var d, end, head, ref1;
    head = (data.length > 1 ? plural : singular);
    if (tail == null) {
      tail = '';
    }
    if (wrap == null) {
      wrap = '';
    }
    if (!$.isArray(wrap)) {
      wrap = [wrap, wrap];
    }
    if (flip) {
      ref1 = [tail, head], head = ref1[0], tail = ref1[1];
    }
    data = (function() {
      var l, len1, results1;
      results1 = [];
      for (l = 0, len1 = data.length; l < len1; l++) {
        d = data[l];
        results1.push(wrap[0] + d + wrap[1]);
      }
      return results1;
    })();
    if (data.length === 0) {
      return '';
    }
    if (data.length === 1) {
      return $.trim([head, data[0], tail].join(' '));
    }
    end = data.pop();
    return $.trim([head, data.join(', '), 'and', end, tail].join(' '));
  };

  title_type = {
    CNV: 'CNV Probe',
    DGVa: 'DGVa'
  };

  if (window.fixes == null) {
    window.fixes = {};
  }

  window.fixes.fix_g_variation = {
    fixes: {
      global: [
        function(data) {
          data.tp2_row.register(100, function() {
            var desc, extract, ft, g, genes, i, l, len1, len2, m, n, name, o, p, pattern, phenotypes, re, ref1, ref2, source, t, title, type;
            ft = data.tp2_row.best('feature_type');
            if ($.inArray(ft, ["Variation", "Somatic Mutation"]) !== -1) {
              desc = data.tp2_row.best('description');
              extract = function(re, key) {
                var out;
                out = void 0;
                desc = desc.replace(re, ((function(_this) {
                  return function(g0, g1) {
                    out = g1;
                    return '';
                  };
                })(this)));
                return out;
              };
              source = extract(/A (.*?) (Variation|Somatic Mutation)\. /);
              phenotypes = extract(/Phenotype\(s\): (.*?)\./);
              genes = extract(/Gene Association\(s\): (.*?)\./);
              if (phenotypes != null) {
                ref1 = phenotypes.split(';');
                for (i = l = 0, len1 = ref1.length; l < len1; i = ++l) {
                  p = ref1[i];
                  data.tp2_row.add_value('v-phenotypes-raw', p, i * 100 + 500);
                }
              }
              if (genes != null) {
                ref2 = genes.split(',');
                for (i = o = 0, len2 = ref2.length; o < len2; i = ++o) {
                  g = ref2[i];
                  data.tp2_row.add_value('v-genes', g, i * 100 + 500);
                }
              }
              if (desc.match(/\w/)) {
                data.tp2_row.add_value('new-contents', desc, 100);
                data.tp2_row.candidate('description', '', 900);
              }
              return data.tp2_row.candidate('v-source', source, 100);
            } else if (ft === 'Phenotype') {
              desc = data.tp2_row.best('description');
              name = data.tp2_row.best('name');
              title = desc != null ? desc.replace(/\.$/, '') : void 0;
              if (title == null) {
                title = name.toLowerCase();
              }
              return data.tp2_row.candidate('main-title', title, 200);
            } else if (ft === 'StructuralVariation') {
              data.tp2_row.candidate('title_feature_type', 'Structural Variation', 200);
              desc = data.tp2_row.best('description');
              re = /A structural variation from (.*?)\, identified by (.*)$/;
              m = desc.match(re);
              if (m != null) {
                data.tp2_row.candidate('sv-source', m[1], 100);
                n = m[2].replace(/\(study (.*)\)/, '');
                if (n != null) {
                  data.tp2_row.candidate('sv-study', n[1], 100);
                }
                data.tp2_row.candidate('sv-method', m[2], 100);
                type = void 0;
                for (pattern in title_type) {
                  t = title_type[pattern];
                  if (m[1].indexOf(pattern) !== -1) {
                    type = t;
                  }
                }
                if (type) {
                  return data.tp2_row.add_value('bracketed-title', type, 290);
                }
              }
            }
          });
          data.tp2_row.register(500, function() {
            var cosmic, csites, ctype, forms, i, k, l, len1, len2, len3, m, name1, o, p, parts, results1, std, str, type, u, v, vp, vpr, x;
            vpr = data.tp2_row.all_values('v-phenotypes-raw');
            if (!vpr) {
              return;
            }
            vpr = (function() {
              var l, len1, ref1, results1;
              ref1 = vpr.sort(function(a, b) {
                return a.position - b.position;
              });
              results1 = [];
              for (l = 0, len1 = ref1.length; l < len1; l++) {
                k = ref1[l];
                results1.push(k.value);
              }
              return results1;
            })();
            cosmic = {};
            forms = {};
            for (l = 0, len1 = vpr.length; l < len1; l++) {
              p = vpr[l];
              m = p.match(/(COSMIC):(tumour_site):(.*)/);
              if (m != null) {
                if (cosmic[name1 = m[2]] == null) {
                  cosmic[name1] = [];
                }
                cosmic[m[2]].push(m[3]);
              } else if (p.match(/HGMD_MUTATION/)) {
                data.tp2_row.add_value('new-contents', "<i>Annotated by HGMD but no phenotype description is publicly available (HGMD_MUTATION)</i>", 5000);
              } else {
                parts = (function() {
                  var len2, o, ref1, results1;
                  ref1 = p.toLowerCase().split(',');
                  results1 = [];
                  for (o = 0, len2 = ref1.length; o < len2; o++) {
                    x = ref1[o];
                    results1.push($.trim(x));
                  }
                  return results1;
                })();
                std = parts.sort(function(a, b) {
                  return a.localeCompare(b);
                }).join(' ').replace(/\s+/g, ' ');
                if ((forms[std] == null) || forms[std][1] > parts.length) {
                  forms[std] = [p, parts.length];
                }
              }
            }
            vp = (function() {
              var results1;
              results1 = [];
              for (k in forms) {
                v = forms[k];
                results1.push(v[0]);
              }
              return results1;
            })();
            for (i = o = 0, len2 = vp.length; o < len2; i = ++o) {
              p = vp[i];
              if (p.toUpperCase() === p) {
                vp[i] = p.charAt(0) + p.substring(1).toLowerCase();
              }
            }
            for (u = 0, len3 = vp.length; u < len3; u++) {
              p = vp[u];
              data.tp2_row.add_value('v-phenotypes', p, 200 + i);
            }
            i = 0;
            results1 = [];
            for (ctype in cosmic) {
              csites = cosmic[ctype];
              type = ctype.replace(/_/g, ' ');
              i += 1;
              str = "Associated with COSMIC " + _list_string(type, type + "s", csites, '', false, '"');
              results1.push(data.tp2_row.add_value('new-contents', str, 4000 + i));
            }
            return results1;
          });
          data.tp2_row.register(1000, function() {
            var assocs, k, vg, vp, vs;
            vs = data.tp2_row.best('v-source');
            if (vs) {
              vs = vs.replace(/_/g, ' ');
              data.tp2_row.add_value('bracketed-title', vs, 255);
            }
            assocs = [];
            vp = data.tp2_row.all_values('v-phenotypes');
            if (vp) {
              vp = (function() {
                var l, len1, ref1, results1;
                ref1 = vp.sort(function(a, b) {
                  return a.position - b.position;
                });
                results1 = [];
                for (l = 0, len1 = ref1.length; l < len1; l++) {
                  k = ref1[l];
                  results1.push(k.value);
                }
                return results1;
              })();
              assocs.push(_list_string("phenotype", "phenotypes", vp, '', true, '"'));
            }
            vg = data.tp2_row.all_values('v-genes');
            if (vg && vg.length) {
              vg = (function() {
                var l, len1, ref1, results1;
                ref1 = vg.sort(function(a, b) {
                  return a.position - b.position;
                });
                results1 = [];
                for (l = 0, len1 = ref1.length; l < len1; l++) {
                  k = ref1[l];
                  results1.push(k.value);
                }
                return results1;
              })();
              assocs.push(_list_string("gene", "genes", vg));
            }
            if (assocs.length) {
              return data.tp2_row.add_value('new-contents', "Associated with " + assocs.join(' and '), 10);
            }
          });
          return true;
        }
      ]
    }
  };

}).call(this);
